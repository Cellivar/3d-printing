## Common macros that don't fit into other categories

[gcode_macro M106]
  rename_existing: M106.106
  description: Override M106 to support P fan parameter
  gcode:
    {% set p = params.P | default(0) | int %}
    {% set s = params.S | default(255) | float %}
    {% set fans = printer['gcode_macro _EXTENDED_GCODE_COMMANDS'].fan_list | default([]) %}

    {% if (p > fans | length) %}
      { action_raise_error('Invalid fan index %s, did you set fan_list correctly?' % p) }
    {% endif %}

    {% if p == 0 and (fans[0] == None or fans[0] == '') %}
      M106.106 S{s}
    {% else %}
      {% if s > 1.0 %}
        {% set s = (s % 256) / 255 %}
      {% endif %}
      SET_FAN_SPEED FAN={fans[p]} SPEED={s}
    {% endif %}

[gcode_macro M109]
  description: Override M109 to use TEMPERATURE_WAIT instead.
  rename_existing: M109.109
  gcode:
    # https://github.com/Klipper3d/klipper/blob/master/klippy/kinematics/extruder.py#L252
    {% set s = params.S | float %}
    {% set t = params.T | default(0) | int %}

    # Set hotend temp
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

    {% if t == 0 %}
      {% set sensor = "extruder"%}
    {% else %}
      {% set sensor = "extruder%s" % (t) %}
    {% endif %}

    {% if s != 0 %}
      # Wait for hotend temp (within 1 degree)
      M117 Heat {sensor}
      TEMPERATURE_WAIT SENSOR={sensor} MINIMUM={s} MAXIMUM={s+1}
    {% endif %}

[gcode_macro M190]
  rename_existing: M190.190
  gcode:
    # https://github.com/Klipper3d/klipper/blob/master/klippy/extras/heater_bed.py
    {% set s = params.S | float %}

    # Set hotend temp
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

    {% if s != 0 %}
      # Wait for bed temp (within 1 degree)
      M117 Heat {sensor}
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
    {% endif %}

[gcode_macro PURGE_LINE]
  description = Draw a line of filament to prime the nozzle for printing
  gcode =
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(0) | int %}
    {% if EXTRUDER_TEMP == 0 %}
      { action_raise_error('EXTRUDER_TEMP temp missing from HEAT_AND_PURGE_LINE') }
    {% endif %}

    {% set cfg = printer['gcode_macro _EXTENDED_GCODE_COMMANDS'] %}
    {% set start_x      = cfg.purgeline_start_x %}
    {% set start_y      = cfg.purgeline_start_y %}
    {% set line_length  = cfg.purgeline_length %}
    {% set purge_speed  = cfg.purgeline_purge_speed %}
    {% set travel_speed = cfg.purgeline_travel_speed %}

    # Purge towards the center of the X axis
    {% if (start_x > (printer.toolhead.axis_maximum.x / 2 | int)) %}
      {% set purge_x = line_length | abs * -1 %}
      {% set purge_clear = -20 %}
    {% else %}
      {% set purge_x = line_length | abs %}
      {% set purge_clear = 20 %}
    {% endif %}

    {% set purge_amount = line_length / 4 %}

    # Move to purge location, then wait for temperature
    M117 Heating...
    G90
    G0 X{start_x} Y{start_y} Z5 F{travel_speed}
    G1 Z1 F300

    # Heat up all extruders at the same time.
    {% set extruders = params.EXTRUDERS | default([0]) %}
    {% for t in extruders %}
    M104 T{t} S{EXTRUDER_TEMP}
    {% endfor %}
    {% for t in extruders %}
    M109 T{t} S{EXTRUDER_TEMP}
    {% endfor %}

    M117 Purging {purge_amount}mm
    G11 # Unretract in case we were retracted
    M83 # Relative extrusion mode
    # Prime the nozzle and draw the line
    G1 E2
    G1 X{start_x + purge_x} E{purge_amount} F{purge_speed}
    # Retract and rapid move to break ooze string
    G10
    G0 X{start_x + purge_x + purge_clear} Z2 F{travel_speed}
    G92 E0
    M82

# Loading filament into the extruder. Enables a Fluidd UI button.
[gcode_macro LOAD_FILAMENT]
  gcode:
    {% set cfg = printer['gcode_macro _EXTENDED_GCODE_COMMANDS'] %}
    SAVE_GCODE_STATE NAME=load_state
    M83
    G1 E{cfg.load_length}       F{cfg.load_speed}       # fast-load
    G1 E{cfg.load_purge_length} F{cfg.load_purge_speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

# Unloading filament from the extruder. Enables a Fluidd UI button.
[gcode_macro UNLOAD_FILAMENT]
  gcode:
    {% set cfg = printer['gcode_macro _EXTENDED_GCODE_COMMANDS'] %}
    SAVE_GCODE_STATE NAME=unload_state
    M83
    G1 E-{cfg.load_purge_length} F{cfg.load_purge_speed} # Pull out of nozzle
    G1 E-{cfg.load_length + cfg.load_unload_extra} F{cfg.load_speed} # Fast eject
    RESTORE_GCODE_STATE NAME=unload_state

# Enable stepper idle currents when printer is idle.
[gcode_macro _ENABLE_STEPPER_CHILLAX]
  description = Reduce hold current for steppers when idle, to keep them cooler
  variable_driver = "tmc2209"
  variable_idle_current_ratio = 0.2
  gcode =
    {% for stepper in printer.motion_report.steppers %}
      {% if stepper.startswith("stepper_") %}
        {% set holdcurrent = idle_current_ratio * printer["%s %s" % (driver, stepper)].run_current %}
        SET_TMC_CURRENT STEPPER={stepper} HOLDCURRENT={holdcurrent}
      {% endif %}
    {% endfor %}

[gcode_macro _DISABLE_STEPPER_CHILLAX]
  description = Disable hold current for steppers when idle, for stability
  variable_driver = "tmc2209"
  gcode =
    {% for stepper in printer.motion_report.steppers %}
      {% if stepper.startswith("stepper_") %}
        {% set runcurrent = printer["%s %s" % (driver, stepper)].run_current %}
        SET_TMC_CURRENT STEPPER={stepper} HOLDCURRENT={runcurrent}
      {% endif %}
    {% endfor %}

# One button macro to get the printer warmed up and ready to print
[gcode_macro INITIALIZE]
  description: Start up printer and go through the motions, literally.
  gcode:
    _START_CALIBRATE

    # Start heat soaking the bed.
    M140 S60
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z50 F8000
    M117 ...Idle...
