################################################################################
## Setup
## Main printer config needs to have a macro with these values
# [gcode_macro _PROBE_DOCK_CONFIG]
#   description: Config details for a dockable probe
#   # Variable for storing the state of the probe
#   variable_is_docked = true
#   # Distance the bed should be past to avoid dock clearance issues
#   variable_clearance_z = 25
#   # Servo positions for the deployment
#   variable_servo_name = "probe_dock"
#   variable_servo_open = 0
#   variable_servo_closed = 250
#   # Location of the nozzle when the probe engages or disengages in the dock
#   variable_dock_x = 55
#   variable_dock_y = 168.5
#   # The position to start the approach to attach
#   variable_attach_approach_x = 55
#   variable_attach_approach_y = 130
#   # The position to move to extract the probe
#   variable_attach_clear_x = 90
#   variable_attach_clear_y = 168.5
#   # The position to start the approach to detach. Usually the same as attach_clear
#   variable_detach_approach_x = 90
#   variable_detach_approach_y = 168.5
#   # The position to move to after detaching the probe. Usually the same as attach_approach
#   variable_detach_clear_x = 55
#   variable_detach_clear_y = 130
#   gcode:

[gcode_macro UNDOCK_PROBE]
  description: Unock the probe
  gcode:
    # Make sure we're homed
    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error('Home before docking the probe!') }
    {% endif %}

    {% set conf = printer['gcode_macro _PROBE_DOCK_CONFIG'] %}
    {% if not conf %}
      { action_raise_error('Config _PROBE_DOCK_CONFIG not found!') }
    {% endif %}

    {% if not conf.is_docked %}
      { action_raise_error('Probe seems to be already docked') }
    {% else %}

      # Only bother moving the bed if we need to
      {% if (printer.toolhead.position.z < conf.clearance_z) %}
        G0 Z{conf.clearance_z}
      {% endif %}

      G0 F6000

      # Enter the approach pattern, attach, clear dock
      G0 X{conf.attach_approach_x} Y{conf.attach_approach_y}

      # Let the probe be open. Stop having it be closed.
      SET_SERVO servo={conf.servo_name} angle={conf.servo_open}
      G4 P750 # Servos don't move instantly

      G0 X{conf.dock_x} Y{conf.dock_y}
      G4 P100
      G0 X{conf.attach_clear_x} Y{conf.attach_clear_y}

      SET_SERVO servo={conf.servo_name} angle={conf.servo_closed}
      G4 P750 # Servos don't move instantly

      M400 # Wait for motion to complete before continuing
      QUERY_PROBE
      _CHECK_PROBE_ATTACHMENT ATTACHED=True
      SET_GCODE_VARIABLE MACRO=_PROBE_DOCK_CONFIG VARIABLE=is_docked VALUE=False
    {% endif %}

[gcode_macro DOCK_PROBE]
  description: Dock the probe
  gcode:
    # Make sure we're homed
    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error('Home before undocking the probe!') }
    {% endif %}

    {% set conf = printer['gcode_macro _PROBE_DOCK_CONFIG'] %}
    {% if not conf %}
      { action_raise_error('Config _PROBE_DOCK_CONFIG not found!') }
    {% endif %}

    {% if conf.is_docked %}
      { action_raise_error('Probe seems to already be docked') }
    {% else %}

      G0 F6000

      # Only bother moving the bed if we need to
      {% if (printer.toolhead.position.z < conf.clearance_z) %}
        G0 Z{conf.clearance_z}
      {% endif %}

      # Enter the approach pattern so the servo is clear
      G0 X{conf.detach_approach_x} Y{conf.detach_approach_y}

      # Let the probe be open. Stop having it be closed.
      SET_SERVO servo={conf.servo_name} angle={conf.servo_open}
      G4 P750 # Servos don't move instantly

      G0 X{conf.dock_x} Y{conf.dock_y}
      G4 P100
      G0 X{conf.detach_clear_x} Y{conf.detach_clear_y}

      SET_SERVO servo={conf.servo_name} angle={conf.servo_closed}
      G4 P750 # Servos don't move instantly

      M400 # Wait for motion to complete before continuing
      QUERY_PROBE
      _CHECK_PROBE_ATTACHMENT ATTACHED=False
      SET_GCODE_VARIABLE MACRO=_PROBE_DOCK_CONFIG VARIABLE=is_docked VALUE=True

    {% endif %}

[gcode_macro _CHECK_PROBE_ATTACHMENT]
  description: Confirms a probe is attached or detatched, make sure to query before calling this!
  gcode:
    {% if params.ATTACHED == True and printer.probe.last_query == 1 %}
      { action_raise_error("Probe may not have attached correctly")}
    {% endif %}

    {% if params.ATTACHED == False and printer.probe.last_query == 0 %}
      { action_raise_error("Probe may not have detached correctly")}
    {% endif %}
