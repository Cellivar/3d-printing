################################################################################
## Setup
## Main printer config needs to have a macro with these values
# [gcode_macro _PROBE_DOCK_CONFIG]
#   description: Config details for a dockable probe
#   # Distance the bed should be past to avoid dock clearance issues
#   variable_clearance_z = 25
#   # Servo positions for the deployment
#   variable_servo_name = "probe_dock"
#   variable_servo_open = 0
#   variable_servo_closed = 250
#   variable_servo_delay = 750  # Milliseconds to wait for the servo to stop
#   # Location of the nozzle when the probe engages or disengages in the dock
#   variable_dock_x = 55
#   variable_dock_y = 168.5
#   # The position to start the approach to attach
#   variable_attach_approach_x = 55
#   variable_attach_approach_y = 130
#   # The position to move to extract the probe
#   variable_attach_clear_x = 90
#   variable_attach_clear_y = 168.5
#   gcode:
################################################################################
## User interface!

[gcode_macro _CHECK_PROBE]
  description: Get and validate the state of the probe
  gcode:
    # Query the probe so we can use its result in the set macro
    QUERY_PROBE
    _SET_PROBE_STATE ACTION={ params.ACTION }

[gcode_macro ATTACH_PROBE]
  description: Attach the probe to the toolhead, with optional locking.
  gcode:
    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error('Home before docking the probe!') }
    {% endif %}

    {% if ('LOCK' in params) %}
      SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ True }
    {% endif %}

    {% set conf  = printer['gcode_macro _PROBE_DOCK_CONFIG'] %}
    {% set state = printer['gcode_macro _PROBE_VARIABLES'] %}

    {% if state.probe_lock %}
      {% if conf.verbose %}
        { action_respond_info("Probe locked, skipping attach") }
      {% endif %}
      _CHECK_PROBE
    {% elif state.probe_attached %}
      {% if conf.verbose %}
        { action_respond_info("Probe attached, skipping attach") }
      {% endif %}
      _CHECK_PROBE
    {% else %}

      G90
      G0 F6000

      # Enter the approach pattern to make sure we're clear of the dock
      G0 X{conf.attach_approach_x} Y{conf.attach_approach_y}

      _PROBE_DOCK_DEPLOY

      G0 X{conf.dock_x} Y{conf.dock_y}
      G4 P50 # Prevent rounding the corner
      G0 X{conf.attach_clear_x} Y{conf.attach_clear_y}

      _PROBE_DOCK_RETRACT

      _CHECK_PROBE ACTION=attach

      {% if (params.RETURN | default(False)) %}
        G0 X{printer.toolhead.position.x} Y{printer.toolhead.position.y}
      {% endif %}

    {% endif %}

[gcode_macro DOCK_PROBE]
  description: Dock the probe, with explicit unlocking.
  gcode:
    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error('Home before undocking the probe!') }
    {% endif %}

    {% set unlock = ('UNLOCK' in params) %}
    {% if unlock %}
      SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }
    {% endif %}

    {% set conf  = printer['gcode_macro _PROBE_DOCK_CONFIG'] %}
    {% set state = printer['gcode_macro _PROBE_VARIABLES'] %}

    {% if state.probe_lock and not unlock %}
      {% if conf.verbose %}
        { action_respond_info("Probe locked, skipping docking") }
      {% endif %}
      _CHECK_PROBE
    {% elif not state.probe_attached %}
      {% if conf.verbose %}
        { action_respond_info("Probe docked, skipping docking") }
      {% endif %}
      _CHECK_PROBE
    {% else %}

      G90
      G0 F6000

      # Perform the attach pattern in reverse, start with the clear position
      G0 X{conf.attach_clear_x} Y{conf.attach_clear_y}

      _PROBE_DOCK_DEPLOY

      G0 X{conf.dock_x} Y{conf.dock_y}
      G4 P50 # Prevent rounding the corner
      G0 X{conf.attach_approach_x} Y{conf.attach_approach_y}

      _PROBE_DOCK_RETRACT

      _CHECK_PROBE ACTION=dock

      {% if (params.RETURN | default(False)) %}
        G0 X{printer.toolhead.position.x} Y{printer.toolhead.position.y}
      {% endif %}

    {% endif %}

################################################################################
## Internals!

[gcode_macro _PROBE_VARIABLES]
  description            : State variables for the current probe status
  variable_probe_attached: False
  variable_probe_lock    : False
  gcode                  :

[gcode_macro _PROBE_DOCK_DEPLOY]
  description: Run the servo to open the dock for the probe
  gcode:
    {% set conf = printer['gcode_macro _PROBE_DOCK_CONFIG'] %}

    # Only bother moving the bed if we need to
    {% if (printer.toolhead.position.z < conf.clearance_z) %}
      G90
      G0 Z{conf.clearance_z}
    {% endif %}

    M400 # Wait until other moves complete in case the head is near the dock

    # Let the probe be open. Stop having it be closed.
    SET_SERVO servo={conf.servo_name} angle={conf.servo_open}
    M400
    G4 P{conf.servo_delay}

    # Relax the servo so it doesn't cook
    SET_SERVO servo={conf.servo_name} width=0

[gcode_macro _PROBE_DOCK_RETRACT]
  description: Run the servo to move the dock to the stowed position
  gcode:
    {% set conf = printer['gcode_macro _PROBE_DOCK_CONFIG'] %}

    # Only bother moving the bed if we need to
    {% if (printer.toolhead.position.z < conf.clearance_z) %}
      G90
      G0 Z{conf.clearance_z}
    {% endif %}

    M400 # Wait until other moves complete in case the head is near the dock

    SET_SERVO servo={conf.servo_name} angle={conf.servo_closed}
    M400
    G4 P{conf.servo_delay}

    # Relax the servo so it doesn't cook
    SET_SERVO servo={conf.servo_name} width=0

[gcode_macro _SET_PROBE_STATE]
  description: Only call through _CHECK_PROBE!
  gcode:
    # The probe reads triggered if it's actually triggered or if it's not attached
    # Assume, here, that we are not pressing the probe against the bed right now
    {% set probe_attached = printer.probe.last_query == 0 %}
    {% set action  = params.ACTION|default('') %}

    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_attached VALUE={ probe_attached }

    {% if probe_attached and action == 'dock' %}
      { action_raise_error("Probe dock failed!") }
    {% endif %}

    {% if probe_attached and action == 'home' %}
      { action_raise_error("Remove probe before homing!") }
    {% endif %}

    {% if not probe_attached and action == 'attach' %}
      { action_raise_error("Probe attach failed!") }
    {% endif %}

[gcode_macro _CHECK_PROBE_WITHIN_BED]
  description: Ensure the probe is above the bed to avoid missing and nozzle crash.
  gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}{ action_raise_error("Must home first!") }{% endif %}
    {% set pos = printer.gcode_move.position %}
    {% set pos_x = pos.x + printer.configfile.settings.probe.x_offset %}
    {% set pos_y = pos.y + printer.configfile.settings.probe.y_offset %}

    # Assumption: The nozzle can't go past the bed. This may not be true for your printer!
    {% set bed = printer.toolhead %}

    {% if pos_x > bed.axis_maximum.x
        or pos_x < bed.axis_minimum.x
        or pos_y > bed.axis_maximum.y
        or pos_y < bed.axis_minimum.y  %}
      { action_raise_error("Probe is not within bounds of the bed! Check the offset.")}
    {% endif %}

[gcode_macro _ATTACH_RUN_MACRO_THEN_DETATCH]
  description: Attach the probe, run a macro, then detatch the probe.
  gcode:
    {% set THE_MACRO  = params.THE_MACRO  | default('') | string %}
    {% set THE_PARAMS = params.THE_PARAMS | default('') | string %}

    {% if ('CHECK_IS_HOMED' in params)
      and not 'xyz' in printer.toolhead.homed_axes %}
      { action_raise_error("Must home first!") }
    {% endif %}

    {% if ('CHECK_IN_BED' in params) %}
      _CHECK_PROBE_WITHIN_BED
    {% endif %}

    _CHECK_PROBE
    ATTACH_PROBE RETURN={True}

    {THE_MACRO} {THE_PARAMS}

    DOCK_PROBE RETURN={True}

################################################################################
## Overrides!

[gcode_macro Z_TILT_ADJUST]
  rename_existing: _Z_TILT_ADJUST
  description: Synchronize multiple z motors, using a dockable probe
  gcode:
    _ATTACH_RUN_MACRO_THEN_DETATCH THE_MACRO=_Z_TILT_ADJUST THE_PARAMS='{rawparams}'

[gcode_macro BED_MESH_CALIBRATE]
  rename_existing: _BED_MESH_CALIBRATE
  description: Perform Mesh Bed Leveling, using a dockable probe
  gcode:
    _ATTACH_RUN_MACRO_THEN_DETATCH THE_MACRO=_BED_MESH_CALIBRATE THE_PARAMS='{rawparams}'

# [gcode_macro SCREWS_TILT_CALCULATE]
#   rename_existing: _SCREWS_TILT_CALCULATE
#   description: Calibrate bed screws, using a dockable probe
#   gcode:
#     _ATTACH_RUN_MACRO_THEN_DETATCH THE_MACRO=_SCREWS_TILT_CALCULATE THE_PARAMS='{rawparams}'

# [gcode_macro QUAD_GANTRY_LEVEL]
#   rename_existing: _QUAD_GANTRY_LEVEL
#   description: Conform a moving, twistable gantry to the shape of a stationary bed, using a dockable probe
#   gcode:
#     _ATTACH_RUN_MACRO_THEN_DETATCH THE_MACRO=_QUAD_GANTRY_LEVEL THE_PARAMS='{rawparams}'

[gcode_macro PROBE]
  rename_existing: _PROBE
  description: Probe the current location, using a dockable probe
  gcode:
    _ATTACH_RUN_MACRO_THEN_DETATCH THE_MACRO=_PROBE CHECK_IN_BED={True} THE_PARAMS='{rawparams}'

[gcode_macro PROBE_ACCURACY]
  rename_existing: _PROBE_ACCURACY
  description: Repeatedly probe the current position, using a dockable probe
  gcode:
    _ATTACH_RUN_MACRO_THEN_DETATCH THE_MACRO=_PROBE_ACCURACY CHECK_IN_BED={True} THE_PARAMS='{rawparams}'

[gcode_macro PROBE_CALIBRATE]
  rename_existing: _PROBE_CALIBRATE
  description:Calibrate the probes z_offset, using a dockable probe
  gcode:
    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error('Home before undocking the probe!') }
    {% endif %}

    _CHECK_PROBE_WITHIN_BED

    _CHECK_PROBE
    ATTACH_PROBE RETURN={True}

    _PROBE_CALIBRATE {rawparams}

    RESPOND TYPE=echo MSG='Moving toolhead 20mm from the bed'
    TESTZ Z=20
    RESPOND TYPE=echo MSG='Manually remove the probe and continue calibration'