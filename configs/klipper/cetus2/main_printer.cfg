
################################################################################
## Printer Basics

[mcu]
serial        : /dev/serial/by-id/usb-Klipper_stm32f103xe_32FFDD053050453910572343-if00
restart_method: command

[printer]
  kinematics             = cartesian
  max_velocity           = 200
  max_accel              = 8000
  minimum_cruise_ratio   = 0.625
  # Default of 10, 13 is stable with no weird noises
  max_z_velocity         = 13
  max_z_accel            = 1000
  square_corner_velocity = 5.0

################################################################################
## Steppers

[stepper_x]
  step_pin                = DRIVERX_STEP
  dir_pin                 = DRIVERX_DIR
  enable_pin              = !DRIVERX_EN
  microsteps              = 32
  rotation_distance       = 40
  full_steps_per_rotation = 200

  endstop_pin         = DRIVERX_END
  position_min        = -2
  position_endstop    = -1
  # Default of 200, 209 is the very end of the rail
  position_max        = 209
  homing_speed        = 50
  homing_retract_dist = 5
  homing_positive_dir = false
  second_homing_speed = 5
  step_pulse_duration = 0.000008

[stepper_y]
  step_pin                = DRIVERY_STEP
  dir_pin                 = DRIVERY_DIR
  enable_pin              = !DRIVERY_EN
  microsteps              = 32
  rotation_distance       = 40
  full_steps_per_rotation = 200

  endstop_pin         = !DRIVERY_END
  position_min        = -2
  # Default of 35, at 46 the min at -2 just barely stays on the rail
  position_endstop    = 46
  # Default of 300, 307 is just barely before hitting the stepper housing
  position_max        = 307
  homing_speed        = 50
  homing_retract_dist = 15
  homing_positive_dir = false
  second_homing_speed = 5
  step_pulse_duration = 0.000008

[stepper_z]
  step_pin                = DRIVERZ_STEP
  dir_pin                 = DRIVERZ_DIR
  enable_pin              = !DRIVERZ_EN
  microsteps              = 32
  rotation_distance       = 4
  full_steps_per_rotation = 200

  endstop_pin         = !DRIVERZ_END
  # Default of 305
  position_max        = 335
  # Default of -3, -8 allows for more spring compression at risk of bed hit
  # Make sure you run a bed mesh before printing!
  position_min        = -8
  homing_speed        = 25
  homing_retract_dist = 10
  second_homing_speed = 5
  homing_positive_dir = false
  position_endstop    = 5.0

# Custom homing procedure because the Y/Z endstop is shared.
[homing_override]
  axes = xyz
  gcode =
    # Params is an array, 'G' is always the first param. If there are no other
    # params it means home everything.
    {% set home_x = (('X' in params) or (params|length == 1)) %}
    {% set home_y = (('Y' in params) or (params|length == 1)) %}
    {% set home_z = (('Z' in params) or (params|length == 1)) %}
    M117 Homing...

    # The Y and Z axis shares a hall effect sensor for an endstop. If Z is below
    # 20 or Y is below 145 readings will conflict.
    {% set conflict_y = ('y' in printer.toolhead.homed_axes) and (printer.toolhead.position.y < 145) %}

    SAVE_GCODE_STATE NAME=STATE_HOME_OVERRIDE
    G90

    {% if (not 'z' in printer.toolhead.homed_axes) %}
      {% set home_z = true %}
      SET_KINEMATIC_POSITION Z=0
    {% endif %}
    {% if (printer.toolhead.position.z < 19) or (home_z) %}
      RESPOND MSG="Moving to clear the Z sensor."
      G0 Z20 F3000
    {% endif %}

    # X and Y first
    {% if home_x %}
      M117 Homing X
      G28 X
      G0 X1 F6000
    {% endif %}

    {% if home_y %}
      M117 Homing Y
      # Y-axis will trigger between 10 and 45, move +25 and see if it's triggered
      SET_KINEMATIC_POSITION Y=0
      G0 Y15 F2000 # Gently, in case we slam into the stepper housing...
      QUERY_ENDSTOPS
      _CLEAR_Y_HOMING
      G28 Y
      {% set conflict_y = true %}
    {% endif %}

    {% if home_z %}
      {% if conflict_y %}
        # Move away from the sensor for Z.
        G0 Y150 F6000
      {% endif %}
      # Since we set the kinematic position we must re-home Z
      M117 Homing Z
      G28 Z
      G0 Z20 F3000
    {% endif %}

    RESTORE_GCODE_STATE NAME=STATE_HOME_OVERRIDE
    M117 ...Idle...

# Helper macro to make the y-axis homing faster in most cases.
[gcode_macro _CLEAR_Y_HOMING]
  description = Ensure y-axis is clear of the endstop when homing
  gcode =
    # Needs to be another macro so we can parse the query
    {% if printer.query_endstops.last_query.y == 1 %}
      # We're somewhere between 15 and 50-ish, safe to fast move +50
      G91
      G0 Y50 F7000
      G90
    {% endif %}

################################################################################
## Extruder

[include toolhead.cfg]

# This is a thermistor on the MCU board, but doesn't actually drive a heater.
# I don't need htis sensor enabled, so I commented it out.
# [temperature_sensor]
#   sensor_type = V510RNTC100K10KRG
#   sensor_pin: PA1
#   min_temp: 0
#   max_temp: 150
#   adc_voltage    = 3.3
#   voltage_offset = 0

#   # The original config had this in a heater_generic block with this pin
#   # referencing a motherboard cooling fan. That doesn't exist on my board.
#   heater_pin = PC8
#   control  = pid
#   pid_kp   = 53.867
#   pid_ki   = 0.647
#   pid_kd   = 1121.107

[pwm_cycle_time _beeper_cetus2]
  pin: BEEP0
  value: 0
  shutdown_value: 0
  cycle_time: 0.0005 # Default beeper tone in kHz. 1 / 0.0005 = 2000Hz (2kHz)

[gcode_macro M300]
  gcode:
    {% set out_pin = "_beeper_cetus2" %}
    {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
    {% set P = params.P|default(100)|int %} ; P sets the tone duration
    {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
    {% if S <= 0 %} ; dont divide through zero
        {% set F = 1 %}
        {% set L = 0 %}
    {% elif S >= 10000 %} ;max frequency set to 10kHz
        {% set F = 0 %}
    {% else %}
        {% set F = 1/S %} ;convert frequency to seconds
    {% endif %}
    SET_PIN PIN={out_pin} VALUE={L} CYCLE_TIME={F} ;Play tone
    G4 P{P} ;tone duration
    SET_PIN PIN={out_pin} VALUE=0

[gcode_macro BEEP]
  gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
      M300 S{freq} P{dur} L{0.8}
    {% endfor %}

# Cuts power to steppers, requires re-homing if toggled!!!
[output_pin _STEPPER_MOTOR_POWER]
  pin   = POWER0
  value = 1

# This output toggles a small red LED on the motherboard. I prefer it disabled.
# [output_pin LIGHT]
#   pin = LIGHT0

################################################################################
## Bed and Platform

# Bed thermistor
# Same deal as the extruders, name is derived from the wiring diagram
# Vcc - 510(ohms) - NTC100K - 10K(ohms) - Ground
# Used for the bed platform sensor
[adc_temperature V510RNTC100K10KRG]
  temperature1: 0
  voltage1: 0.098328417
  temperature2: 10
  voltage2: 0.156985871
  temperature3: 20
  voltage3: 0.243165574
  temperature4: 30
  voltage4: 0.363036304
  temperature5: 40
  voltage5: 0.520176545
  temperature6: 50
  voltage6: 0.71413114
  temperature7: 60
  voltage7: 0.939903161
  temperature8: 70
  voltage8: 1.18705036
  temperature9: 80
  voltage9: 1.443569554
  temperature10: 90
  voltage10: 1.697792869
  temperature11: 100
  voltage11: 1.934349355
  temperature12: 110
  voltage12: 2.143135472
  temperature13: 120
  voltage13: 2.321981424
  temperature14: 130
  voltage14: 2.47710554
  temperature15: 140
  voltage15: 2.607458913
  temperature16: 150
  voltage16: 2.710472279
  temperature17: 160
  voltage17: 2.790933694
  temperature18: 170
  voltage18: 2.854424358
  temperature19: 180
  voltage19: 2.906899923
  temperature20: 190
  voltage20: 2.949905245
  temperature21: 200
  voltage21: 2.983212649
  temperature22: 300
  voltage22: 3.109599239

[heater_bed]
  heater_pin     = BED_HEATER
  sensor_pin     = BED_TEMP
  sensor_type    = V510RNTC100K10KRG
  adc_voltage    = 3.3
  voltage_offset = 0

  max_power = 1.0
  min_temp  = 0
  max_temp  = 100
  control   = pid
  pid_Kp    = 48.112
  pid_Ki    = 1.224
  pid_Kd    = 472.700

[verify_heater heater_bed]
  # Bed heater is a little undersized for higher temperatures and can trip.
  # Give it more time to work, default is 60.
  check_gain_time = 140

# Screws are 30mm in along the sides of the bed. Make sure the bed clips won't
# interfere!
[screws_tilt_adjust]
  screw1      = 30,  0
  screw1_name = 'Rear Left'
  screw2      = 30,  300
  screw2_name = 'Rear Right'
  screw3      = 170, 300
  screw3_name = 'Front Right'
  screw4      = 170, 0
  screw4_name = 'Front Left'

  speed = 180
  horizontal_move_z = 7

[bed_mesh]
  speed             = 200
  horizontal_move_z = 3
  mesh_min          = 10,  10
  mesh_max          = 190, 290
  probe_count       = 3,   4

[delayed_gcode bed_mesh_init]
  initial_duration = .01
  gcode =
    BED_MESH_PROFILE LOAD=default
