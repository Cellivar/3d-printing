
#MIX                                Vertical Gradient Mixing. Gradient adjust automatically to print height.
#                                   MIX P=1 ;current extruder gradually increase flow from 11% to 88%;
#                                   MIX P=2 ;current extruder gradually decrease flow from 88%% to 11%.
#                                   MIX P=1 X=1; X is a speed factor that determines how fast the gradient will reach maximum/minimum.
#                                   eg X=1 is proportional to model height, X=0.5 will produce a longer gradient while X=2 will produce
#                                   a gradient half the height of the model.

[mcu]
serial        : /dev/serial/by-id/usb-Klipper_stm32f103xe_32FFDD053050453910572343-if00
restart_method: command

[printer]
  kinematics             = cartesian
  max_velocity           = 200
  max_accel              = 8000
  minimum_cruise_ratio   = 0.625
  # Default of 10, 13 is stable with no weird noises
  max_z_velocity         = 13
  max_z_accel            = 1000
  square_corner_velocity = 5.0

[adc_temperature V51RNTC100K510RG]
  temperature1 = 0
  voltage1     = 0.005167951
  temperature2 = 100
  voltage2     = 0.236675573
  temperature3 = 200
  voltage3     = 1.512265253
  temperature4 = 300
  voltage4     = 2.537313433

[adc_temperature V510RNTC100K10KRG]
  temperature1 = 0
  voltage1     = 0.098328417
  temperature2 = 100
  voltage2     = 1.934349355
  temperature3 = 300
  voltage3     = 3.109599239

[probe]
  pin = !PROBE0
  deactivate_on_each_sample = True
  samples_tolerance_retries = 5

  samples             = 3
  samples_result      = average
  sample_retract_dist = 3.0
  samples_tolerance   = 0.1
  activate_gcode =
    G4 P500

  z_offset   = -0.160
  y_offset   = 0
  x_offset   = 0
  speed      = 3
  lift_speed = 5

[homing_override]
  axes = xyz
  gcode =
    # Params is an array, 'G' is always the first param. If there are no other
    # params it means home everything.
    {% set home_x = (('X' in params) or (params|length == 1)) %}
    {% set home_y = (('Y' in params) or (params|length == 1)) %}
    {% set home_z = (('Z' in params) or (params|length == 1)) %}

    # The Y and Z axis shares a hall effect sensor for an endstop. If Z is below
    # 20 or Y is below 145 readings will conflict.
    {% set conflict_y = ('y' in printer.toolhead.homed_axes) and (printer.toolhead.position.y < 145) %}

    G90

    {% if (not 'z' in printer.toolhead.homed_axes) %}
      {% set home_z = true %}
      SET_KINEMATIC_POSITION Z=0
    {% endif %}
    {% if (printer.toolhead.position.z < 19) or (home_z) %}
      RESPOND MSG="Moving to clear the Z sensor."
      G0 Z20 F3000
    {% endif %}

    # X and Y first
    {% if home_x %}
      RESPOND MSG="Homing X"
      G28 X
      G0 X1 F6000
    {% endif %}

    {% if home_y %}
      RESPOND MSG="Homing Y"
      # Y-axis will trigger between 10 and 45, move +25 and see if it's triggered
      SET_KINEMATIC_POSITION Y=0
      G0 Y15 F2000 # Gently, in case we slam into the stepper housing...
      QUERY_ENDSTOPS
      _CLEAR_Y_HOMING
      G28 Y
      {% set conflict_y = true %}
    {% endif %}

    {% if home_z %}
      {% if conflict_y %}
        # Move away from the sensor for Z.
        G0 Y150 F6000
      {% endif %}
      # Since we set the kinematic position we must re-home Z
      RESPOND MSG="Homing Z"
      G28 Z
      G0 Z20 F3000
    {% endif %}
    RESPOND MSG="Homing complete"

[gcode_macro _CLEAR_Y_HOMING]
  description = Ensure y-axis is clear of the endstop when homing
  gcode =
    # Needs to be another macro so we can parse the query
    {% if printer.query_endstops.last_query.y == 1 %}
      # We're somewhere between 15 and 50-ish, safe to fast move +50
      G91
      G0 Y50 F7000
      G90
    {% endif %}


[stepper_x]
  step_pin                = DRIVERX_STEP
  dir_pin                 = DRIVERX_DIR
  enable_pin              = !DRIVERX_EN
  microsteps              = 32
  rotation_distance       = 40
  full_steps_per_rotation = 200

  endstop_pin         = DRIVERX_END
  position_min        = -2
  position_endstop    = -1
  # Default of 200, 209 is the very end of the rail
  position_max        = 209
  homing_speed        = 50
  homing_retract_dist = 5
  homing_positive_dir = false
  second_homing_speed = 5
  step_pulse_duration = 0.000008

[stepper_y]
  step_pin                = DRIVERY_STEP
  dir_pin                 = DRIVERY_DIR
  enable_pin              = !DRIVERY_EN
  microsteps              = 32
  rotation_distance       = 40
  full_steps_per_rotation = 200

  endstop_pin         = !DRIVERY_END
  position_min        = -2
  # Default of 35, at 46 the min at -2 just barely stays on the rail
  position_endstop    = 46
  # Default of 300, 307 is just barely before the stepper housing
  position_max        = 307
  homing_speed        = 50
  homing_retract_dist = 15
  homing_positive_dir = false
  second_homing_speed = 5
  step_pulse_duration = 0.000008

[stepper_z]
  step_pin                = DRIVERZ_STEP
  dir_pin                 = DRIVERZ_DIR
  enable_pin              = !DRIVERZ_EN
  microsteps              = 32
  rotation_distance       = 4
  full_steps_per_rotation = 200

  endstop_pin         = !DRIVERZ_END
  # Default of 305
  position_max        = 335
  # Default of -3, -8 allows for more spring compression at risk of bed hit
  # Make sure to set the z offset!
  position_min        = -8
  homing_speed        = 25
  homing_retract_dist = 10
  second_homing_speed = 5
  homing_positive_dir = false
  position_endstop    = 5.0

[fan]
  pin = FAN0

[output_pin beeper_cetus2]
  pin: BEEP0
  value: 0
  shutdown_value: 0
  pwm: True
  cycle_time: 0.0005 ; Default beeper tone in kHz. 1 / 0.0005 = 2000Hz (2kHz)

[gcode_macro BEEP]
  gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper_cetus2 VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper_cetus2 VALUE=0
        G4 P{dur}
    {% endfor %}

# Cuts power to steppers, requires re-homing if toggled!!!
[output_pin _STEPPER_MOTOR_POWER]
  pin   = POWER0
  value = 1

# Only an LED on the main board, boring..
# [output_pin LIGHT]
#   pin = LIGHT0

[firmware_retraction]
  retract_length         = 1
  retract_speed          = 20
  unretract_extra_length = 0.5
  unretract_speed        = 10

[bed_mesh]
  speed             = 200
  horizontal_move_z = 3
  mesh_min          = 10,  10
  mesh_max          = 190, 290
  probe_count       = 3,   4

[delayed_gcode bed_mesh_init]
  initial_duration = .01
  gcode =
    BED_MESH_PROFILE LOAD=default

[extruder]
  step_pin                = DRIVERE0_STEP
  dir_pin                 = DRIVERE0_DIR
  enable_pin              = DRIVERE0_EN
  microsteps              = 32
  gear_ratio              = 50:1
  full_steps_per_rotation = 48

  # Original value 29, recalculated using calibration
  # https://ellis3dp.com/Print-Tuning-Guide/articles/extruder_calibration.html
  rotation_distance       = 27

  nozzle_diameter   = 0.400
  filament_diameter = 1.750

  heater_pin     = HEATERE0
  sensor_pin     = TEMPE0
  sensor_type    = V51RNTC100K510RG
  min_temp       = -100
  max_temp       = 3000
  adc_voltage    = 3.3
  voltage_offset = 0
  max_power      = 0.7

  pressure_advance              = 0.2
  pressure_advance_smooth_time  = 0.150
  max_extrude_cross_section     = 20
  instantaneous_corner_velocity = 10.000
  max_extrude_only_distance     = 200.0
  max_extrude_only_velocity     = 50000
  max_extrude_only_accel        = 5000
  step_pulse_duration           = 0.000002

  min_extrude_temp = 0

  control = pid
  pid_kp  = 9.749
  pid_ki  = 0.448
  pid_kd  = 53.008

[extruder1]
  step_pin                = DRIVERE1_STEP
  dir_pin                 = DRIVERE1_DIR
  enable_pin              = DRIVERE1_EN
  microsteps              = 32
  gear_ratio              = 50:1
  full_steps_per_rotation = 48

  # Original value 29, recalculated using calibration
  # https://ellis3dp.com/Print-Tuning-Guide/articles/extruder_calibration.html
  rotation_distance       = 27

  nozzle_diameter   = 0.400
  filament_diameter = 1.750

  heater_pin     = HEATERE1
  sensor_pin     = TEMPE1
  sensor_type    = V51RNTC100K510RG
  min_temp       = -100
  max_temp       = 3000
  adc_voltage    = 3.3
  voltage_offset = 0
  max_power      = 0.7

  pressure_advance              = 0.2
  pressure_advance_smooth_time  = 0.150
  max_extrude_cross_section     = 20
  instantaneous_corner_velocity = 10.000
  max_extrude_only_distance     = 200.0
  max_extrude_only_velocity     = 50000
  max_extrude_only_accel        = 5000
  step_pulse_duration           = 0.000002

  min_extrude_temp = 0

  control = pid
  pid_kp  = 9.749
  pid_ki  = 0.448
  pid_kd  = 53.008

[heater_bed]
  heater_pin     = BED_HEATER
  sensor_pin     = BED_TEMP
  sensor_type    = V510RNTC100K10KRG
  adc_voltage    = 3.3
  voltage_offset = 0

  max_power = 1.0
  min_temp  = 0
  max_temp  = 100
  control   = pid
  pid_Kp    = 48.112
  pid_Ki    = 1.224
  pid_Kd    = 472.700

[verify_heater heater_bed]
  # Bed heater is a little undersized for higher temperatures and can trip.
  # Give it more time to work, default is 60.
  check_gain_time = 140

[screws_tilt_adjust]
  screw1      = 30,  0
  screw1_name = 'Rear Left'
  screw2      = 30,  300
  screw2_name = 'Rear Right'
  screw3      = 170, 300
  screw3_name = 'Front Right'
  screw4      = 170, 0
  screw4_name = 'Front Left'

  speed = 180
  horizontal_move_z = 7

# This is a thermistor on the MCU board, but doesn't actually drive a heater.
# [heater_generic MAINBOARD]
  # gcode_id       = MB
  # heater_pin     = PC8
  # sensor_pin     = PA1
  # sensor_type    = V510RNTC100K10KRG
  # max_power      = 1.0
  # adc_voltage    = 3.3
  # voltage_offset = 0

  # min_temp = -100
  # max_temp = 1000
  # control  = pid
  # pid_kp   = 53.867
  # pid_ki   = 0.647
  # pid_kd   = 1121.107

[input_shaper]
  shaper_freq_x = 54.2
  shaper_type_x = mzv
  shaper_freq_y = 43.2
  shaper_type_y = 2hump_ei
