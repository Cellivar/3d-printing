
################################################################################
## Extruders and Toolhead

# Part cooling fan output, controllable. The hotend fans are not.
[fan]
  pin = FAN0

# The name for this comes from the wiring diagram
# Vcc - R1 value - NTC100K - R2 value - Ground
# V - 51(ohms) - NTC100K - 510(ohms) - Ground
# Used for extruders. Full curve pulled from config off tierbox wand server.
[adc_temperature V51RNTC100K510RG]
  temperature1: 0
  voltage1: 0.005167951
  temperature2: 20
  voltage2: 0.013382527
  temperature3: 40
  voltage3: 0.031463237
  temperature4: 60
  voltage4: 0.066889233
  temperature5: 80
  voltage5: 0.130353962
  temperature6: 100
  voltage6: 0.236675573
  temperature7: 120
  voltage7: 0.3947924
  temperature8: 160
  voltage8: 0.8976
  temperature9: 170
  voltage9: 1.044044665
  temperature10: 180
  voltage10: 1.199315898
  temperature11: 190
  voltage11: 1.359670383
  temperature12: 200
  voltage12: 1.512265253
  temperature13: 210
  voltage13: 1.653891509
  temperature14: 220
  voltage14: 1.784729586
  temperature15: 230
  voltage15: 1.91206544
  temperature16: 240
  voltage16: 2.034574468
  temperature17: 250
  voltage17: 2.14504206
  temperature18: 260
  voltage18: 2.242803838
  temperature19: 270
  voltage19: 2.329089399
  temperature20: 280
  voltage20: 2.405660377
  temperature21: 290
  voltage21: 2.474272273
  temperature22: 300
  voltage22: 2.537313433

# I have not validated this makes sense.
[input_shaper]
  shaper_freq_x = 54.2
  shaper_type_x = mzv
  shaper_freq_y = 43.2
  shaper_type_y = 2hump_ei

# The probe is an accelerometer on the bottom of the X axis gantry. It needs
# some speed to trigger properly, but when triggering properly it's very close
# to the actual nozzle position.
[probe]
  pin = !PROBE0
  deactivate_on_each_sample = True
  samples_tolerance_retries = 5

  samples             = 3
  samples_result      = average
  sample_retract_dist = 3.0
  samples_tolerance   = 0.1
  # Pause to let the sensor reset, waiting too little can cause spurious errors
  activate_gcode =
    G4 P750

  z_offset   = -0.160
  y_offset   = 0
  x_offset   = 0
  # Needs some speed to trigger properly when it taps the bed.
  speed      = 3
  lift_speed = 5


[extruder]
  step_pin   = DRIVERE0_STEP
  dir_pin    = !DRIVERE0_DIR
  enable_pin = DRIVERE0_EN
  microsteps = 32
  gear_ratio              = 50:1
  full_steps_per_rotation = 48
  rotation_distance       = 29

  # step_pin   = ercf:DRIVER_S_STEP
  # dir_pin    = ercf:DRIVER_S_DIR
  # enable_pin = ercf:DRIVER_S_EN
  # microsteps = 16

  # full_steps_per_rotation = 200
  # rotation_distance       = 5.7

  nozzle_diameter   = 0.400
  filament_diameter = 1.750

  heater_pin     = HEATERE0
  sensor_pin     = TEMPE0
  sensor_type    = V51RNTC100K510RG
  min_temp       = -100
  max_temp       = 3000
  adc_voltage    = 3.3
  voltage_offset = 0
  max_power      = 0.7

  # Default of 0.2
  pressure_advance              = 0.02
  # Default of 0.150
  #pressure_advance_smooth_time  = 0.150
  max_extrude_cross_section     = 200
  # Was set to 10, default is 5
  #instantaneous_corner_velocity = 1.0
  max_extrude_only_distance     = 200.0
  max_extrude_only_velocity     = 50000
  max_extrude_only_accel        = 5000
  step_pulse_duration           = 0.000002

  min_extrude_temp = 0

  control = pid
  pid_kp  = 9.749
  pid_ki  = 0.448
  pid_kd  = 53.008

# [tmc2209 extruder]
#   uart_pin: ercf:DRIVER_S_UART
#   uart_address: 1
#   run_current: 0.65
#   interpolate: False
#   sense_resistor: 0.110
#   stealthchop_threshold: 0

#   # Idle delay down into hold current, gracefully.
#   hold_current: 0.1
#   driver_IHOLDDELAY = 15
#   driver_TPOWERDOWN = 255

[extruder1]
  step_pin   = DRIVERE1_STEP
  dir_pin    = DRIVERE1_DIR
  enable_pin = DRIVERE1_EN
  microsteps = 32
  gear_ratio              = 50:1
  full_steps_per_rotation = 48

  rotation_distance       = 29
  # step_pin   = ercf:DRIVER_G_STEP
  # dir_pin    = ercf:DRIVER_G_DIR
  # enable_pin = ercf:DRIVER_G_EN
  # microsteps = 16

  # full_steps_per_rotation = 200
  # rotation_distance       = 5.7

  nozzle_diameter   = 0.400
  filament_diameter = 1.750

  heater_pin     = HEATERE1
  sensor_pin     = TEMPE1
  sensor_type    = V51RNTC100K510RG
  min_temp       = -100
  max_temp       = 3000
  adc_voltage    = 3.3
  voltage_offset = 0
  max_power      = 0.7

  pressure_advance              = 0.2
  #pressure_advance_smooth_time  = 0.150
  max_extrude_cross_section     = 20
  instantaneous_corner_velocity = 10.000
  max_extrude_only_distance     = 200.0
  max_extrude_only_velocity     = 50000
  max_extrude_only_accel        = 5000
  step_pulse_duration           = 0.000002

  min_extrude_temp = 0

  control = pid
  pid_kp  = 9.749
  pid_ki  = 0.448
  pid_kd  = 53.008

# [tmc2209 extruder]
#   uart_pin: ercf:DRIVER_G_UART
#   uart_address: 0
#   run_current: 0.65
#   interpolate: False
#   sense_resistor: 0.110
#   stealthchop_threshold: 0

#   # Idle delay down into hold current, gracefully.
#   hold_current: 0.1
#   driver_IHOLDDELAY = 15
#   driver_TPOWERDOWN = 255

# Okay so let's talk retraction.
# Klipper would like you to enable the G10 (retract) and G11 (unretract) commands
# by inserting a block that might look like this. We add this here so things
# that look for a firmware_retraction block will find it. We're about to
# override these though so the values don't matter.
[firmware_retraction]
  retract_length         = 1.5 #mm
  retract_speed          = 100 #mm/s
  unretract_extra_length = 0   #mm
  unretract_speed        = 100 #mm/s
# Well, after significant tuning I can tell you that this does not work for a
# Cetus2 2-in-1-out extruder stack. No amount of modifying these or other values
# would result in anything less than a mess of stringing.
#
# It appears the firmware_retraction implementation in Klipper doesn't work for
# extruder motion chains, or rather, the way it handles multiple extruder motion
# queues doesn't map to how the Cetus2 hotend needs it to work.
#
# We get to do it manually instead!
#
# First some variables to store the retraction state and length
[gcode_macro _RETRACTION_STATE]
  variable_retract_length   = 0.6 #mm
  variable_retract_speed    = 35 #mm/s
  variable_unretract_length = 0.6 #mm
  variable_unretract_speed  = 35 #mm/s
  variable_retracted        = False
  gcode =

# Compatability macro to mimic the firmware version of this
[gcode_macro SET_RETRACTION]
  rename_existing = BASE_SET_RETRACTION
  gcode =
    {% set r_macro = printer['gcode_macro _RETRACTION_STATE'] %}

    {% set retract_length = params.RETRACT_LENGTH %} # 5
    {% if retract_length %}
      {% set new_ret = retract_length | float %}
    {% else %}
      {% set new_ret = r_macro.retract_length %}
    {% endif %}
    {% set new_ret_diff = r_macro.retract_length - new_ret %} # 1

    {% set unretract_extra_length = params.UNRETRACT_EXTRA_LENGTH %}
    {% if unretract_extra_length %}
      {% set new_unr = new_ret + (unretract_extra_length | float) %}
    {% else %}
      # Mimic the Klipper behavior
      {% set new_unr = r_macro.unretract_length - new_ret_diff %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=_RETRACTION_STATE VARIABLE=retract_length VALUE={new_ret}
    SET_GCODE_VARIABLE MACRO=_RETRACTION_STATE VARIABLE=unretract_length VALUE={new_unr}

    # Speeds are easy

    {% set retract_speed = params.RETRACT_SPEED %}
    {% if retract_speed %}
      SET_GCODE_VARIABLE MACRO=_RETRACTION_STATE VARIABLE=retract_speed VALUE={retract_speed | float}
    {% endif %}

    {% set unretract_speed = params.UNRETRACT_SPEED %}
    {% if unretract_speed %}
      SET_GCODE_VARIABLE MACRO=_RETRACTION_STATE VARIABLE=unretract_speed VALUE={unretract_speed | float}
    {% endif %}

[gcode_macro GET_RETRACTION]
  rename_existing = BASE_GET_RETRACTION
  gcode =
    {% set r_macro = printer['gcode_macro _RETRACTION_STATE'] %}
    {% set re_len  = r_macro.retract_length %}
    {% set re_spd  = r_macro.retract_speed %}
    {% set un_len  = r_macro.unretract_length %}
    {% set un_spd  = r_macro.unretract_speed %}
    {% set un_xtr  = un_len - re_len %}

    # Compatible with this format
    # // RETRACT_LENGTH=1.00000 RETRACT_SPEED=20.00000 UNRETRACT_EXTRA_LENGTH=0.00000 UNRETRACT_SPEED=10.00000
    { action_respond_info('RETRACT_LENGTH=%0.5f RETRACT_SPEED=%0.5f UNRETRACT_EXTRA_LENGTH=%0.5f UNRETRACT_SPEED=%0.5f' % (re_len, re_spd, un_xtr, un_spd) ) }

[gcode_macro G10]
  description = Firmware retract Cetus2 style
  # We override the original G10 with this one, and don't use the original.
  rename_existing = G10.9999
  gcode =
    {% set retract_length = printer['gcode_macro _RETRACTION_STATE'].retract_length %}
    {% set retract_speed  = printer['gcode_macro _RETRACTION_STATE'].retract_speed %}
    {% set retracted      = printer['gcode_macro _RETRACTION_STATE'].retracted %}

    # Store the current mix ratio for the current tool
    {% set active_tool = printer["gcode_macro _ACTIVATE_TOOL"].active_tool | default(0) %}
    {% set tool_macro  = printer['gcode_macro T%s' % active_tool] %}

    # Don't re-retract if we're already retracted. This mimics the behavior of
    # native G10/G11 which stores the retract state. This is good enough.
    {% if not retracted %}
      SAVE_GCODE_STATE NAME=retraction

      # Set to 50/50 mix
      M567 P{active_tool} E0.5:0.5

      # Retract
      M83
      G1 E-{retract_length} F{retract_speed * 60}

      # Restore current mix ratio for the current tool
      M567 P{active_tool} E{tool_macro.mixing_ratios | join(':')}

      SET_GCODE_VARIABLE MACRO=_RETRACTION_STATE VARIABLE=retracted VALUE=True
      RESTORE_GCODE_STATE NAME=retraction
    {% endif %}

[gcode_macro G11]
  description = Firmware unretract Cetus2 style
  # Same as above we're replacing the stock G11 wholesale.
  rename_existing = G11.9999
  gcode =
    {% set unretract_length = printer['gcode_macro _RETRACTION_STATE'].unretract_length %}
    {% set unretract_speed  = printer['gcode_macro _RETRACTION_STATE'].unretract_speed %}
    {% set retracted        = printer['gcode_macro _RETRACTION_STATE'].retracted %}

    # Store the current mix ratio for the current tool
    {% set active_tool = printer["gcode_macro _ACTIVATE_TOOL"].active_tool | default(0) %}
    {% set tool_macro  = printer['gcode_macro T%s' % active_tool] %}

    # Don't re-retract if we're already retracted. This mimics the behavior of
    # native G10/G11 which stores the retract state. This is good enough.
    {% if retracted %}
      SAVE_GCODE_STATE NAME=retraction

      # Set to 50/50 mix
      M567 P{active_tool} E0.5:0.5

      # Unretract
      M83
      G1 E{unretract_length} F{unretract_speed * 60}

      # Restore current mix ratio for the current tool
      M567 P{active_tool} E{tool_macro.mixing_ratios | join(':')}
      SET_GCODE_VARIABLE MACRO=_RETRACTION_STATE VARIABLE=retracted VALUE=False
      RESTORE_GCODE_STATE NAME=retraction
    {% endif %}

################################################################################
## Toolhead Selection Macros

[gcode_macro T0]
  description = Activate Extruder 1
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=0

[gcode_macro T1]
  description = Activate Extruder 2
  variable_mixing_steppers  = ['extruder1', 'extruder']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=1

[gcode_macro T2]
  description = Activate Extruder 3
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [0.5, 0.5]
  gcode =
    _ACTIVATE_TOOL P=2

[gcode_macro T3]
  description = Activate Extruder 4
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=3

[gcode_macro T4]
  description = Activate Extruder 5
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=4

[gcode_macro T5]
  description = Activate Extruder 6
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=5

[gcode_macro T6]
  description = Activate Extruder 7
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=6

[gcode_macro T7]
  description = Activate Extruder 8
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=7

[gcode_macro T8]
  description = Activate Extruder 9
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=8

[gcode_macro T9]
  description = Activate Extruder 10
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=9

# Variables for additional macros and M-commands
[gcode_macro _EXTENDED_GCODE_COMMANDS]
  description: Configuration for custom gcode command overrides, for additional features.

  # Config for PURGE_LINE
  variable_purgeline_start_x      = 209 # X position of start of purge line
  variable_purgeline_start_y      = 305 # Y position of start of purge line
  variable_purgeline_length       = 40 # Length of line, along X axis towards center.
  variable_purgeline_purge_speed  = 1200
  variable_purgeline_travel_speed = 7000

  # Configure the mapping of fan_generic to P parameters for M106
  # This lets your slicer emit 'M106 P3 S255' style commands for chamber cooling
  # Make sure the list includes up to the index you intend to use!
  variable_fan_list = [
    ''] # P0, leave blank for default [fan].

  # Load and unload filament macros
  variable_load_length  = 55 # Distance to load quickly
  variable_load_speed  = 1000
  variable_load_purge_length = 25 # Distance to purge through the nozzle to clear it
  variable_load_purge_speed  = 300
  variable_load_unload_extra = 25 # Additional unload distance, just to be safe

  gcode:
