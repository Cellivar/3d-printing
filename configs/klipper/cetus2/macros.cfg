# Variables for Fluidd's macros
[gcode_macro _CLIENT_VARIABLE]
  variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
  variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
  variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
  variable_custom_park_dz   : 45.0  ; custom dz value; the value in mm to lift the nozzle when move to park position

  variable_retract          : 1.0   ; the value to retract while PAUSE
  variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
  variable_speed_retract    : 35.0  ; retract speed in mm/s
  variable_unretract        : 1.0   ; the value to unretract while RESUME
  variable_speed_unretract  : 35.0  ; unretract speed in mm/s
  variable_speed_hop        : 15.0  ; z move speed in mm/s
  variable_speed_move       : 100.0 ; move speed in mm/s

  variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
  variable_park_at_cancel_x : -1    ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
  variable_park_at_cancel_y : 305   ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True

  # !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
  variable_use_fw_retract   : True  ; use fw_retraction instead of the manual version [True/False]
  variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
  variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
  #                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg

  # !!! Custom macros, please use with care and review the section of the corresponding macro.
  # These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
  # Only  single line commands are supported, please create a macro if you need more than one command.
  variable_user_pause_macro : ""                      ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
  variable_user_resume_macro: "_RESUME_DUAL_EXTRUDER" ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
  variable_user_cancel_macro: ""                      ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
  gcode:

# Variables for additional macros and M-commands
[gcode_macro _EXTENDED_GCODE_COMMANDS]
  description: Configuration for custom gcode command overrides, for additional features.

  # Config for PURGE_LINE
  variable_purgeline_start_x      = 209 # X position of start of purge line
  variable_purgeline_start_y      = 305 # Y position of start of purge line
  variable_purgeline_length       = 40 # Length of line, along X axis towards center.
  variable_purgeline_purge_speed  = 1200
  variable_purgeline_travel_speed = 7000

  # Configure the mapping of fan_generic to P parameters for M106
  # This lets your slicer emit 'M106 P3 S255' style commands for chamber cooling
  # Make sure the list includes up to the index you intend to use!
  variable_fan_list = [
    ''] # P0, leave blank for default [fan].

  # Load and unload filament macros
  variable_load_length  = 55 # Distance to load quickly
  variable_load_speed  = 1000
  variable_load_purge_length = 25 # Distance to purge through the nozzle to clear it
  variable_load_purge_speed  = 300
  variable_load_unload_extra = 25 # Additional unload distance, just to be safe

  gcode:

[gcode_macro _RESUME_DUAL_EXTRUDER]
  description = Ensure resume macro activates both extruder temperatures
  gcode =
    {% set restore_macro = printer['gcode_macro RESUME'] %}
    # Restore temperature
    {% if restore_macro.last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the Â° as py2 env's would throw an error otherwise
      RESPOND TYPE=echo MSG='{"Restoring both extruders temperature to %3.1f\u00B0C, this may take some time" % (restore_macro.last_extruder_temp.temp) }'
      M104 T0 S{restore_macro.last_extruder_temp.temp}
      M109 T1 S{restore_macro.last_extruder_temp.temp}
      M109 T0 S{restore_macro.last_extruder_temp.temp}
    {% endif %}

[gcode_macro SET_Z_OFFSET]
  description = Set Z offset
  gcode =
    # Move to center of the bed and use probe to find the bed (carefully..)
    RESPOND TYPE=echo MSG='Setting z-offset at center of bed'
    G90
    G0 X{printer.toolhead.axis_maximum.x/2 |int} Y{printer.toolhead.axis_maximum.y/2 |int} Z5 F6000
    G0 Z2 F120
    # The probe result value is absolute, but we actually want the relative position
    # Probe will leave the nozzle against the bed for us
    probe

    # Invoke a separate macro so the position information is available to Jinja.
    _SZOFFSET_CALCULATE

    # Raise nozzle off the bed to avoid damage
    G91
    G0 Z5 F6000
    G90

[gcode_macro _SZOFFSET_CALCULATE]
  description = Perform math checks for z-offset macro
  gcode =
    {% set probe_correction = 0.2 %}
    {% set probe_result = printer.gcode_move.position.z + probe_correction | default(0.0) | float %}

    # Check that the value is sane
    {% set max_offset = 3 %}
    {% if probe_result | abs > max_offset %}
      RESPOND TYPE=error MSG='Z-offset too high, clean nozzle before trying again.'
    {% else %}
      SET_GCODE_OFFSET Z={probe_result}
      SAVE_VARIABLE VARIABLE=zoffset VALUE={probe_result}
      RESPOND TYPE=echo MSG='Z-offset set to {probe_result}'
    {% endif %}

# Mixing!
[gcode_macro M567]
  description = Set tool mix ratios
  # https://reprap.org/wiki/G-code#M567:_Set_tool_mix_ratios
  # M567 P2 E0.25:0.75

  gcode =
    # P parameter: Specify the tool to apply ratios to.
    # Default to the currently active tool.
    {% set tool = params.P | replace('=', '') | default(printer['gcode_macro _ACTIVATE_TOOL'].active_tool) | int %}
    # Confirm the tool actually, you know, exists.
    {% if not printer['gcode_macro T%s' % tool] %}
      { action_raise_error('Macro T%s not found.' % tool) }
    {% endif %}
    {% set tool_macro = printer['gcode_macro T%s' % tool] %}

    # E parameter: Colon-delimeted movement ratios for each stepper.
    # E0.25:0.75 will extrude 25% via the first extruder, 75% through the second
    # Doesn't need to add up to 100%, but that will be weird.
    # Can't add up to more than 100%, that would break things.
    # If the values provided are less than steppers the remaining are set to 0.
    # Last note, Klipper wants E0.5 style, some tools will do E=0.5. Strip the =
    {% set raw_ratios = params.E | default('1') | replace('=', '') %}
    {% set ratios = raw_ratios.split(':') %}
    {% set new_ratios = [] %}
    {% for t in tool_macro.mixing_steppers %}
      {% set ratio = 0 if loop.index > (ratios | length) else (ratios[loop.index0] | float) %}
      {% set _ = new_ratios.append(ratio) %}
    {% endfor %}

    # RESPOND TYPE=echo MSG="Setting ratios for T{tool} to {new_ratios | pprint | replace("\n", "") | replace("\"", "\\\"")}"
    SET_GCODE_VARIABLE MACRO=T{tool} VARIABLE=mixing_ratios VALUE="{new_ratios | pprint | replace("\n", "") | replace("\"", "\\\"")}"

    # If we just modified the active tool we'll need to re-activate it.
    {% if tool == printer['gcode_macro _ACTIVATE_TOOL'].active_tool %}
      _ACTIVATE_TOOL P={tool}
    {% endif %}

[gcode_macro _ACTIVATE_TOOL]
  description = Apply the config for a tool
  variable_active_tool = 0
  gcode =
    {% set tool = params.P | default(active_tool) | int %}
    {% if not printer['gcode_macro T%s' % tool] %}
      { action_raise_error('Macro T%s not found to activate' % tool) }
    {% endif %}
    {% set tool_macro = printer['gcode_macro T%s' % tool] %}
    {% set lead_extruder = tool_macro.mixing_steppers | first %}

    # Sanity check: Greater than 100% ratio doesn't make sense.
    {% if ((tool_macro.mixing_ratios | sum()) > 1.0) %}
      { action_raise_error('Mixing ratios for T%s add up to over 1.0, currently: %s' % (tool, tool_macro.mixing_ratios)) }
    {% endif %}

    # Set up the lead extruder
    SET_GCODE_VARIABLE MACRO=_ACTIVATE_TOOL VARIABLE=active_tool VALUE={tool}
    ACTIVATE_EXTRUDER EXTRUDER={lead_extruder}

    # Now set up all of the ratios for the group
    {% for t in tool_macro.mixing_steppers %}
      {% set ratio = [[0, tool_macro.mixing_ratios[loop.index0]] | max, 1] | min %}
      {% set queue = lead_extruder if ratio > 0 else '' %}
      {% set ratio = ratio if queue != '' else 1 %} # Zero rotation distance isn't allowed
      {% set distance = printer.configfile.settings[t].rotation_distance / ratio %}
      SYNC_EXTRUDER_MOTION EXTRUDER={t} MOTION_QUEUE={queue}
      SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={t} DISTANCE={distance}
    {% endfor %}

[gcode_macro T0]
  description = Activate Extruder 1
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=0

[gcode_macro T1]
  description = Activate Extruder 2
  variable_mixing_steppers  = ['extruder1', 'extruder']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=1

[gcode_macro T2]
  description = Activate Extruder 3
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [0.5, 0.5]
  gcode =
    _ACTIVATE_TOOL P=2

[gcode_macro T3]
  description = Activate Extruder 4
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=3

[gcode_macro T4]
  description = Activate Extruder 5
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=4

[gcode_macro T5]
  description = Activate Extruder 6
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=5

[gcode_macro T6]
  description = Activate Extruder 7
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=6

[gcode_macro T7]
  description = Activate Extruder 8
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=7

[gcode_macro T8]
  description = Activate Extruder 9
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=8

[gcode_macro T9]
  description = Activate Extruder 10
  variable_mixing_steppers  = ['extruder', 'extruder1']
  variable_mixing_ratios    = [1.0, 0.0]
  gcode =
    _ACTIVATE_TOOL P=9

[gcode_macro INITIALIZE]
  description: Start up printer and go through the motions, literally.
  gcode:
    {% if not "xyz" in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    # Start heat soaking the bed.
    M140 S60
    G0 X{printer.toolhead.axis_maximum.x/2} Y50 Z50 F8000
    M117 ...Idle...

[gcode_macro PRINT_WARMUP]
  description: Preheat and begin heatsoak of the printer before starting a print
  gcode:
    {% set BED_TEMP = params.BED_TEMP|default(0)|int %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|int %}
    {% if EXTRUDER_TEMP == 0 %}
      { action_raise_error('EXTRUDER_TEMP missing from PRINT_WARMUP') }
    {% endif %}

    # Bed is gonna take a while, start now while we do other things.
    M140 S{BED_TEMP}
    # Warm up the extruder, but avoid ooze by keeping it at 75%
    M104 T0 S{EXTRUDER_TEMP * 0.75}
    M104 T1 S{EXTRUDER_TEMP * 0.75}

    # Make sure we're homed
    {% if not "xyz" in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    ## This must come last!
    {% if BED_TEMP > 20 %}
      # Use the secondary bed temperature sensor to wait for a stable temperature
      M117 {"Heating bed %3.1f\u00B0C" % BED_TEMP}
      RESPOND TYPE=echo MSG='{"Preheating bed to %3.1f\u00B0C, this may take some time" % (BED_TEMP)}'
      HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor bed_top'
    {% endif %}

[gcode_macro PRINT_START]
  description = Power on motion system, home, set temperature and initiate printing
  gcode =
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|int %}
    {% if EXTRUDER_TEMP == 0 %}
      {% set EXTRUDER_TEMP = params.EXTRUDER|default(0)|int %}
    {% endif %}
    {% if EXTRUDER_TEMP == 0 %}
      { action_raise_error('EXTRUDER temp missing from PRINT_START') }
    {% endif %}

    {% set BED_TEMP = params.BED_TEMP|default(0)|int %}
    {% if BED_TEMP == 0 %}
      {% set BED_TEMP = params.BED|default(0)|int %}
    {% endif %}

    # Start heating now since it takes a while and we're doing other stuff.
    # Bed takes way longer than nozzle so don't bother preheating nozzles here
    {% if BED_TEMP != 0 %}
      M140 S{BED_TEMP}
    {% endif %}

    # Ensure pause state queue is clear
    CLEAR_PAUSE

    # Make sure we're homed
    {% if not "xyz" in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    # We want to purge all extruders with an even mixture.
    # Store the current tool's values to put it back later.
    {% set active_tool = printer["gcode_macro _ACTIVATE_TOOL"].active_tool | default(0) %}
    {% set tool_macro = printer['gcode_macro T%s' % active_tool] %}
    # Set the mix, ensuring the tool is activated
    {% set temp_mix = [] %}
    {% for t in tool_macro.mixing_steppers %}
      {% set _ = temp_mix.append((1.0 / loop.length) | round(2, 'floor')) %}
    {% endfor %}

    {% set purge_amount = line_length / 4 %}

    M567 P{active_tool} E{temp_mix | join(':')}
    _ACTIVATE_TOOL P={active_tool}

    PURGE_LINE EXTRUDER_TEMP={EXTRUDER_TEMP} EXTRUDERS=[0, 1]

    # Restore the original tool mixture
    M567 P{active_tool} E{tool_macro.mixing_ratios | join(':')}

    RESPOND TYPE=echo MSG='Starting print'

[gcode_macro PRINT_END]
  description = End print job and park print head
  gcode =
    _STOP_PRINTING_AND_PARK

[gcode_macro _STOP_PRINTING_AND_PARK]
  description = Same steps for cancel, end of print, etc.
  gcode =
    TURN_OFF_HEATERS
    M106 S0

    # Move to park using Fluidd's macro, park position is set in _CLIENT_VARIABLE
    _TOOLHEAD_PARK_PAUSE_CANCEL

    # Fluidd variables to reset
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0

[gcode_macro MAINTENANCE_PARK]
  description = Park the print head out front for easy access
  variable_park_x = 209 # Default of 200
  variable_park_y = 307 # Default of 300
  variable_park_z = 70
  gcode =
    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error('Need to home first!') }
    {% else %}
      G90
      G0 X{park_x} Y{park_y} Z{park_z} F7000
      RESPOND type=echo MSG='Head parked for maintenance'
    {% endif %}
