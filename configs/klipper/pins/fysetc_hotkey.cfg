
#####################################
#           Macro Config            #
#####################################
# All buttons call one of two macros depending on how they're pressed
# _${mcu_name}_B#_SHORT - Pressed for shorter than 2 seconds
# _${mcu_name}_B#_LONG - Pressed for longer than 2 seconds
# For example, if you press and hold button 3 and your mcu name is "fysetc_hotkey"
# _fysetc_hotkey_B3_LONG
# will be the macro that is run. Define this macro in your main config, not here.
#
# Add a color macro to your config, this defines the colors the buttons use for
# various states. You can copy/paste this default one. Make sure the name of the
# macro matches your mcu_name parameter.
# [gcode_macro _${mcu_name}_BTN_COLORS]
# description: Lookup table of button colors for various states.
# variable_color_map: {
#   'idle': { 'r': 0.1, 'g': 0, 'b': 0.1, 'w': 0 },
#   'press': { 'r': 0, 'g': 0, 'b': 0, 'w': 0.3 },
#   'busy': { 'r': 0.1, 'g': 0.1, 'b': 0, 'w': 0 },
#   'on': { 'r': 0, 'g': 0.2, 'b': 0, 'w': 0 },
#   'off': { 'r': 0, 'g': 0, 'b': 0, 'w': 0 }
# }
# gcode:

[mcu ${mcu_name}]
  serial: ${mcu_serial}
  restart_method: command

#####################################
#           Macro Config            #
#####################################
# The rest of this file should be left alone.

# Call this macro to set a button to a state
# _${mcu_name}_SET_BTN_LED BTN=3 STATE="idle"
[gcode_macro _${mcu_name}_SET_BTN_LED]
  description: Set the numeric BTN to the STATE= idle, press, busy, on, off
%{ for btn_id in range(1, button_count + 1) ~}
  variable_btn_state_${btn_id}: 'init'
%{ endfor ~}
  gcode:
    {% set btn = params.BTN | default(0) | int %}
    {% if (btn < 1 or btn > ${button_count}) %}
      { action_raise_error('Button T%s is invalid calling SET_BUTTON_LED' % btn) }
    {% endif %}

    {% set transmit = params.TRANSMIT | default(1) | int %}
    {% set btnstatekey = 'btn_state_' ~ btn %}
    {% set oldstate = printer['gcode_macro _${mcu_name}_SET_BTN_LED'][btnstatekey] | default('idle') %}
    {% set newstate = params.STATE | default(oldstate) %}

    {% set c = printer['gcode_macro _${mcu_name}_BTN_COLORS'].color_map[newstate] %}
    SET_LED INDEX={(btn * 2) - 1} TRANSMIT=0          LED=${mcu_name}_leds red={c.r} blue={c.b} green={c.g} white={c.w}
    SET_LED INDEX={(btn * 2)}     TRANSMIT={transmit} LED=${mcu_name}_leds red={c.r} blue={c.b} green={c.g} white={c.w}

    {% set save = params.SAVE | default('True') %}
    {% if (save != 'False') %}
      SET_GCODE_VARIABLE MACRO=_${mcu_name}_SET_BTN_LED VARIABLE={btnstatekey} VALUE='"{newstate}"'
    {% endif %}

# Call this macro to set ALL buttons to a state
# _${mcu_name}_SET_ALL_BTN_LED STATE="idle"
[gcode_macro _${mcu_name}_SET_ALL_BTN_LED]
  description: Set the numeric BTN to the STATE= idle, press, busy, on, off
  gcode:
    {% for idx in range(${button_count + 1}) %}
      {% set transmit = 1 if loop.last else 0 %}
      {% if idx > 0 %}
        _${mcu_name}_SET_BTN_LED BTN={idx} STATE={params.STATE} TRANSMIT={transmit}
      {% endif %}
    {% endfor %}

[delayed_gcode _${mcu_name}_BTN_INIT]
  initial_duration: 1.0
  gcode:
    _${mcu_name}_SET_ALL_BTN_LED STATE='idle'

[gcode_macro _${mcu_name}_BCTRL]
  description: Manage button state on press and release
  variable_btn_state: ({})
  gcode:
    # "Estimated print time" seems to be "seconds since boot" and that's enough
    # of a monotonic incrementing float for our purposes!
    {% set time = printer.toolhead.estimated_print_time | float %}
    {% set btn = params.B | default(0) | int %}
    {% if (btn == 0 or btn > ${button_count}) %}
      { action_raise_error('Button T%s is invalid.' % btn) }
    {% endif %}

    {% if (params.A == 'R') %}
      _${mcu_name}_SET_BTN_LED BTN={btn}
      {% set press = btn_state[btn] | default(0) | float %}
      {% set diff = time - press %}
      {% if (press != 0 and diff > 0.02) %}
        # {action_respond_info("Released %s at %.2f after %.2f" % (btn, time, diff))}
        {% if diff > 1.5 %}
          {% set btn_macro = ('_${mcu_name}_LONG_B' ~ btn) %}
        {% else %}
          {% set btn_macro = ('_${mcu_name}_SHORT_B' ~ btn) %}
        {% endif %}
        {% if printer['gcode_macro %s' % btn_macro] is not none %}
          { btn_macro }
        {% endif %}
      {% endif %}

    {% else %}
      # Record a press for the later release time
      {% set _ = btn_state.update({btn:time}) %}
      SET_GCODE_VARIABLE MACRO=_${mcu_name}_BCTRL VARIABLE=btn_state VALUE="{btn_state | pprint | replace("\n", "") | replace("\"", "\\\"")}"
      # {action_respond_info("Pressed %s at %.2f " % (btn, time))}
      _${mcu_name}_SET_BTN_LED BTN={btn} STATE=press SAVE=False
    {% endif %}

# Config for the hotkey button LEDs
[neopixel ${mcu_name}_leds]
  pin: ${mcu_name}: gpio29
  # Two per configured buttons
  chain_count  : ${(2 * button_count)}
  color_order  : GRB
  initial_RED  : 0.1
  initial_GREEN: 0.1
  initial_BLUE : 0.1

%{ for btn_id in range(1, button_count + 1) }
[gcode_button ${mcu_name}_b${btn_id}]
  pin: ^!${mcu_name}: gpio${btn_id + 1}
  press_gcode  : _${mcu_name}_BCTRL A=P B=${btn_id}
  release_gcode: _${mcu_name}_BCTRL A=R B=${btn_id}
%{ endfor }
