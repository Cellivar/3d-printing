
[gcode_macro _CLIENT_VARIABLE]
  description: Variables for Fluidd macros which handle pause, resume, etc.

  variable_custom_park_dz   : 25.0  ; custom dz value; the value in mm to lift the nozzle when move to park position
  variable_speed_hop        : 100.0  ; z move speed in mm/s
  variable_speed_move       : 450.0 ; move speed in mm/s

  # Park at the center front on cancel
  variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
  variable_park_at_cancel_x : 5     ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
  variable_park_at_cancel_y : 170   ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True

  variable_use_fw_retract   : True  ; use fw_retraction instead of the manual version [True/False]
  variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
  variable_runout_sensor    : "filament_switch_sensor Filament_Runout_bttsfs2"

  variable_user_pause_macro : "_BTNS_PAUSE_PRINT" ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
  variable_user_resume_macro: "_BTNS_START_PRINT" ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
  variable_user_cancel_macro: "_BTNS_STOP_PRINT" ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function

  # Moot because we don't use a custom pause park, just lift the head.
  variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
  variable_custom_park_x    : 5     ; custom x position; value must be within your defined min and max of X
  variable_custom_park_y    : 170   ; custom y position; value must be within your defined min and max of Y
  # These are moot because we enable firmware retraction
  variable_retract          : 1.0   ; the value to retract while PAUSE
  variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
  variable_speed_retract    : 35.0  ; retract speed in mm/s
  variable_unretract        : 1.0   ; the value to unretract while RESUME
  variable_speed_unretract  : 35.0  ; unretract speed in mm/s
  gcode:

[gcode_macro _START_CALIBRATE]
  description: Perform any calibrations that need to be done for this printer
  gcode:
    _fysetc_hotkey_SET_ALL_BTN_LED   STATE='off'
    _fysetc_hotkey_SET_BTN_LED BTN=5 STATE='busy'
    {% set force = params.FORCE | default(0) | int %}
    {% if force == 1 %}
      M117 Force re-cal
    {% endif %}

    {% if not "xyz" in printer.toolhead.homed_axes or force == 1 %}
      G28
    {% endif %}

    {% if not printer.z_tilt.applied or force == 1 %}
      M117 Z-Tilt Calibration
      Z_TILT_ADJUST
    {% endif %}

    {% if printer.z_calibration.last_query != True or force == 1 %}
      M117 Z-tilt
      CALIBRATE_Z
    {% endif %}

    {% if force == 1 %}
      BED_MESH_CALIBRATE
    {% endif %}

    _fysetc_hotkey_SET_ALL_BTN_LED STATE='idle'

[gcode_macro CAL_Z]
  description: Shortcut for CALIBRATE_Z
  gcode: CALIBRATE_Z

[gcode_macro PRINT_WARMUP]
  description: Preheat and begin heatsoak of the printer before starting a print
  gcode:
    SET_PIN PIN=enable_nozzle_z     VALUE=0
    {% set BED_TEMP = params.BED_TEMP|default(0)|int %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|int %}
    {% if EXTRUDER_TEMP == 0 %}
      { action_raise_error('EXTRUDER_TEMP missing from PRINT_WARMUP') }
    {% endif %}

    _fysetc_hotkey_SET_ALL_BTN_LED   STATE='off'  SAVE='False'
    _fysetc_hotkey_SET_BTN_LED BTN=1 STATE='busy' SAVE='False'

    # Warm up the extruder, but avoid ooze by keeping it at 75%
    M104 S{EXTRUDER_TEMP * 0.75}

    ## This must come last!
    {% if BED_TEMP > 20 %}
      # Use the secondary bed temperature sensor to wait for a stable temperature
      M117 {"Heating bed %3.1f\u00B0C" % BED_TEMP}
      RESPOND TYPE=echo MSG='{"Preheating bed to %3.1f\u00B0C, this may take some time" % (BED_TEMP)}'
      HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor bed_top'
    {% endif %}

[gcode_macro PRINT_START]
  gcode:
    SET_PIN PIN=enable_nozzle_z     VALUE=0
    {% set BED_TEMP = params.BED_TEMP|default(0)|int %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|int %}
    {% if EXTRUDER_TEMP == 0 %}
      M117 Error
      { action_raise_error('EXTRUDER temp missing from PRINT_START') }
    {% endif %}

    M140 S{BED_TEMP}
    # Warm up the extruder, but avoid ooze by keeping it at 75%
    M104 S{EXTRUDER_TEMP * 0.75}

    # Ensure pause state queue is clear
    CLEAR_PAUSE

    _START_CALIBRATE

    # Disable hold current for stability during print
    _DISABLE_STEPPER_CHILLAX

    PURGE_LINE EXTRUDER_TEMP={EXTRUDER_TEMP}

    _BTNS_START_PRINT
    ENABLE_bttsfs2
    M117 Printing

[gcode_macro PRINT_END]
  description = End print job and park print head
  gcode =
    _STOP_PRINTING_AND_PARK
    DISABLE_bttsfs2
    M117 ...Idle...

[gcode_macro _STOP_PRINTING_AND_PARK]
  description: Same steps for cancel, end of print, etc.
  variable_keep_bed_hot = True
  gcode =
    SET_PIN PIN=enable_nozzle_z     VALUE=0
    TURN_OFF_HEATERS
    M107

    # Move to park using Fluidd's macro, park position is set in _CLIENT_VARIABLE
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
    {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
      else "X=" ~ client.park_at_cancel_x %}
    {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
      else "Y=" ~ client.park_at_cancel_y %}
    _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y}

    # Fluidd variables to reset
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0

    # Enable lower hold current so they don't heat up
    _ENABLE_STEPPER_CHILLAX

    {% if keep_bed_hot %}
      M140 S{printer.heater_bed.target}
    {% endif %}
    _BTNS_STOP_PRINT
    M117 ...Idle...

# [gcode_macro _BUTTON_B1]
# # EMERGENCY STOP
# # Home Z
# gcode:
#   _status_button_busy BUTTON=1
#   #M112
#   G28 Z
#   _status_button_ready BUTTON=1

[gcode_macro _fysetc_hotkey_BTN_COLORS]
description: Lookup table of button colors for various states.
variable_color_map: {
    'idle':  { 'r': 0.1, 'g': 0,   'b': 0.1, 'w': 0   },
    'press': { 'r': 0.5, 'g': 0.5, 'b': 0.5, 'w': 0.5 },
    'busy':  { 'r': 0.1, 'g': 0.1, 'b': 0,   'w': 0   },
    'on':    { 'r': 0,   'g': 0.2, 'b': 0,   'w': 0   },
    'off':   { 'r': 0,   'g': 0,   'b': 0,   'w': 0   }
  }
gcode:

# Pause/Resume
[gcode_macro _fysetc_hotkey_LONG_B1]
  gcode:
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
      _fysetc_hotkey_SET_BTN_LED BTN=1 STATE=busy
      CANCEL_HEAT_SOAK
      CANCEL_PRINT
    {% endif %}
[gcode_macro _fysetc_hotkey_SHORT_B1]
  gcode:
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
      _fysetc_hotkey_SET_BTN_LED BTN=1 STATE=busy
      {% if printer.pause_resume.is_paused %}
        PAUSE
      {% else %}
        RESUME
      {% endif %}
    {% endif %}

# Wrench
[gcode_macro _fysetc_hotkey_LONG_B2]
  gcode:
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
      {action_respond_info('Pause before maintenance')}
    {% else %}
      _fysetc_hotkey_SET_BTN_LED BTN=2 STATE=busy
      M117 Maint Heat
      M109 S225
      _fysetc_hotkey_SET_BTN_LED BTN=2 STATE=idle
    {% endif %}
[gcode_macro _fysetc_hotkey_SHORT_B2]
  variable_dz_park: 50
  variable_park_speed: 6000
  gcode:
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
      {action_respond_info('Pause before maintenance')}
    {% else %}
      _fysetc_hotkey_SET_BTN_LED BTN=2 STATE=busy
      SAVE_GCODE_STATE NAME=maint_move
      G90
      {% set z_pos = [[(printer.gcode_move.gcode_position.z + dz_park|float), 0]|max, printer.toolhead.axis_maximum.z]|min %}
      G1 Z{z_pos} F{park_speed}
      {% set x_center = ( printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
      G1 X{x_center} Y{printer.toolhead.axis_minimum.y + 2} F{park_speed}
      RESTORE_GCODE_STATE NAME=maint_move
      _fysetc_hotkey_SET_BTN_LED BTN=2 STATE=idle
    {% endif %}

# Unload Filament
[gcode_macro _fysetc_hotkey_LONG_B3]
  gcode:
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
      {action_respond_info('Pause before unloading')}
    {% else %}
      _fysetc_hotkey_SET_BTN_LED BTN=3 STATE=busy
      UNLOAD_FILAMENT
      _fysetc_hotkey_SET_BTN_LED BTN=3 STATE=idle
    {% endif %}
[gcode_macro _fysetc_hotkey_SHORT_B3]
  gcode:
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
      {action_respond_info('Pause before unloading')}
    {% else %}
      _fysetc_hotkey_SET_BTN_LED BTN=3 STATE=busy
      SAVE_GCODE_STATE NAME=unload_state
      M83
      G1 E-10 F600
      RESTORE_GCODE_STATE NAME=unload_state
      _fysetc_hotkey_SET_BTN_LED BTN=3 STATE=idle
    {% endif %}

# Load Filament
[gcode_macro _fysetc_hotkey_LONG_B4]
  gcode:
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
      {action_respond_info('Pause before loading')}
    {% else %}
      _fysetc_hotkey_SET_BTN_LED BTN=4 STATE=busy
      LOAD_FILAMENT
      _fysetc_hotkey_SET_BTN_LED BTN=4 STATE=idle
    {% endif %}
[gcode_macro _fysetc_hotkey_SHORT_B4]
  gcode:
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
      {action_respond_info('Pause before loading')}
    {% else %}
      _fysetc_hotkey_SET_BTN_LED BTN=4 STATE=busy
      SAVE_GCODE_STATE NAME=load_state
      M83
      G1 E10 F600
      RESTORE_GCODE_STATE NAME=load_state
      _fysetc_hotkey_SET_BTN_LED BTN=4 STATE=idle
    {% endif %}

# Home/Init
[gcode_macro _fysetc_hotkey_LONG_B5]
  gcode:
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
      {action_respond_info('Pause before homing')}
    {% else %}
      # Force a re-calibration and bed mesh
      _START_CALIBRATE FORCE=1
    {% endif %}
[gcode_macro _fysetc_hotkey_SHORT_B5]
  gcode:
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
      {action_respond_info('Pause before homing')}
    {% else %}
      INITIALIZE
    {% endif %}

# Utility macros to enter common states
[gcode_macro _BTNS_START_PRINT]
  gcode:
    _fysetc_hotkey_SET_BTN_LED BTN=1 STATE=on
    _fysetc_hotkey_SET_BTN_LED BTN=2 STATE=off
    _fysetc_hotkey_SET_BTN_LED BTN=3 STATE=off
    _fysetc_hotkey_SET_BTN_LED BTN=4 STATE=off
    _fysetc_hotkey_SET_BTN_LED BTN=5 STATE=off

[gcode_macro _BTNS_PAUSE_PRINT]
  gcode:
    _fysetc_hotkey_SET_BTN_LED BTN=1 STATE=busy
    _fysetc_hotkey_SET_BTN_LED BTN=2 STATE=idle
    _fysetc_hotkey_SET_BTN_LED BTN=3 STATE=idle
    _fysetc_hotkey_SET_BTN_LED BTN=4 STATE=idle
    _fysetc_hotkey_SET_BTN_LED BTN=5 STATE=idle

[gcode_macro _BTNS_STOP_PRINT]
  gcode:
    M117 B1 Short
    _fysetc_hotkey_SET_BTN_LED BTN=1 STATE=idle
    _fysetc_hotkey_SET_BTN_LED BTN=2 STATE=idle
    _fysetc_hotkey_SET_BTN_LED BTN=3 STATE=idle
    _fysetc_hotkey_SET_BTN_LED BTN=4 STATE=idle
    _fysetc_hotkey_SET_BTN_LED BTN=5 STATE=idle
