
[gcode_macro _CLIENT_VARIABLE]
  description: Variables for Fluidd macros which handle pause, resume, etc.

  variable_custom_park_dz   : 25.0  ; custom dz value; the value in mm to lift the nozzle when move to park position
  variable_speed_hop        : 50.0  ; z move speed in mm/s
  variable_speed_move       : 300.0 ; move speed in mm/s

  # Park at the center front on cancel
  variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
  variable_park_at_cancel_x : 5     ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
  variable_park_at_cancel_y : 170   ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True

  variable_use_fw_retract   : True  ; use fw_retraction instead of the manual version [True/False]
  variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
  variable_runout_sensor    : "filament_switch_sensor Filament_Runout_bttsfs2"

  # !!! Custom macros, please use with care and review the section of the corresponding macro.
  # These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
  # Only  single line commands are supported, please create a macro if you need more than one command.
  variable_user_pause_macro : "" ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
  variable_user_resume_macro: "" ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
  variable_user_cancel_macro: "" ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function

  # Moot because we don't use a custom pause park, just lift the head.
  variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
  variable_custom_park_x    : 5     ; custom x position; value must be within your defined min and max of X
  variable_custom_park_y    : 170   ; custom y position; value must be within your defined min and max of Y
  # These are moot because we enable firmware retraction
  variable_retract          : 1.0   ; the value to retract while PAUSE
  variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
  variable_speed_retract    : 35.0  ; retract speed in mm/s
  variable_unretract        : 1.0   ; the value to unretract while RESUME
  variable_speed_unretract  : 35.0  ; unretract speed in mm/s
  gcode:

[gcode_macro _EXTENDED_GCODE_COMMANDS]
  description: Configuration for custom gcode command overrides, for additional features.

  # Config for PURGE_LINE
  variable_purgeline_start_x      = 2 # X position of start of purge line
  variable_purgeline_start_y      = 0 # Y position of start of purge line
  variable_purgeline_length       = 40 # Length of line, along X axis towards center.
  variable_purgeline_purge_speed  = 1200
  variable_purgeline_travel_speed = 10000

  # Configure the mapping of fan_generic to P parameters for M106
  # This lets your slicer emit 'M106 P3 S255' style commands for chamber cooling
  # Make sure the list includes up to the index you intend to use!
  variable_fan_list = [
    '', # P0, leave blank for default [fan].
    '', # P1
    '', # P2
    'FILTER_FANS'] # P3, chamber filter, generated by OrcaSlicer.

  # Load and unload filament macros
  variable_load_length  = 55 # Distance to load quickly
  variable_load_speed  = 1000
  variable_load_purge_length = 25 # Distance to purge through the nozzle to clear it
  variable_load_purge_speed  = 300
  variable_load_unload_extra = 25 # Additional unload distance, just to be safe

  gcode:

[gcode_macro _PROBE_DOCK_CONFIG]
  description: Config details for a dockable probe
  variable_verbose = False
  # Distance the bed should be past to avoid dock clearance issues
  variable_clearance_z = 25
  # Servo positions for the deployment
  variable_servo_name = "probe_dock"
  variable_servo_open = 0
  variable_servo_closed = 250
  variable_servo_delay = 750  # Milliseconds to wait for the servo to stop
  # Location of the nozzle when the probe engages or disengages in the dock
  variable_dock_x = 55
  variable_dock_y = 175
  # The position to start the approach to attach
  variable_attach_approach_x = 55
  variable_attach_approach_y = 145
  # The position to move to extract the probe
  variable_attach_clear_x = 90
  variable_attach_clear_y = 175
  gcode:

[gcode_macro INITIALIZE]
  description: Start up printer and go through the motions, literally.
  gcode:
    {% if not "xyz" in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    {% if not printer.z_tilt.applied %}
      M117 Z-Tilt Calibration
      Z_TILT_ADJUST
    {% endif %}

    # Start heat soaking the bed.
    M140 S60
    G0 X{printer.toolhead.axis_maximum.x/2} Y1 Z50 F8000
    M117 ...Idle...

[gcode_macro PRINT_WARMUP]
  description: Preheat and begin heatsoak of the printer before starting a print
  gcode:
    {% set BED_TEMP = params.BED_TEMP|default(0)|int %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|int %}
    {% if EXTRUDER_TEMP == 0 %}
      { action_raise_error('EXTRUDER_TEMP missing from PRINT_WARMUP') }
    {% endif %}

    # Bed is gonna take a while, start now while we do other things.
    M140 S{BED_TEMP}
    # Warm up the extruder, but avoid ooze by keeping it at 75%
    M104 S{EXTRUDER_TEMP * 0.75}

    # Make sure we're homed
    {% if not "xyz" in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    ## This must come last!
    {% if BED_TEMP > 20 %}
      # Use the secondary bed temperature sensor to wait for a stable temperature
      M117 {"Heating bed %3.1f\u00B0C" % BED_TEMP}
      RESPOND TYPE=echo MSG='{"Preheating bed to %3.1f\u00B0C, this may take some time" % (BED_TEMP)}'
      HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor bed_top'
    {% endif %}

[gcode_macro PRINT_START]
  gcode:
    {% set BED_TEMP = params.BED_TEMP|default(0)|int %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|int %}
    {% if EXTRUDER_TEMP == 0 %}
      M117 Error
      { action_raise_error('EXTRUDER temp missing from PRINT_START') }
    {% endif %}

    M140 S{BED_TEMP}
    # Warm up the extruder, but avoid ooze by keeping it at 75%
    M104 S{EXTRUDER_TEMP * 0.75}

    # Ensure pause state queue is clear
    CLEAR_PAUSE

    # Disable hold current for stability during print
    _DISABLE_STEPPER_CHILLAX

    # Make sure we're homed
    {% if not "xyz" in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    {% if not printer.z_tilt.applied %}
      M117 Z-Tilt Calibration
      Z_TILT_ADJUST
    {% endif %}

    PURGE_LINE EXTRUDER_TEMP={EXTRUDER_TEMP}

    ENABLE_bttsfs2
    M117 Printing

[gcode_macro PRINT_END]
  description = End print job and park print head
  gcode =
    _STOP_PRINTING_AND_PARK
    DISABLE_bttsfs2
    M117 ...Idle...

[gcode_macro _STOP_PRINTING_AND_PARK]
  description: Same steps for cancel, end of print, etc.
  variable_keep_bed_hot = True
  gcode =
    TURN_OFF_HEATERS
    M107

    # Move to park using Fluidd's macro, park position is set in _CLIENT_VARIABLE
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
    {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
              else "X=" ~ client.park_at_cancel_x %}
    {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
              else "Y=" ~ client.park_at_cancel_y %}
    _TOOLHEAD_PARK_PAUSE_CANCEL  {park_x} {park_y}

    # Fluidd variables to reset
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0

    # Enable lower hold current so they don't heat up
    _ENABLE_STEPPER_CHILLAX

    {% if keep_bed_hot %}
      M140 S{printer.heater_bed.target}
    {% endif %}
    M117 ...Idle...

[gcode_macro _GENTLE_MOVE_Z]
  description: Gently move the bed relatively, usually when homing
  gcode:
    # We aren't sure where we are, so move GENTLY
    {% set HOME_CURRENT = 0.15 %}
    {% set distance = params.DISTANCE | default(0.0) | float %}

    # Assume there's at least one config, and all the configs are the same..
    {% set RUN_CURRENT_Z = printer.configfile.settings['tmc2209 stepper_z'].run_current | float %}

    SAVE_GCODE_STATE NAME=GENTLE_MOVE_Z

    {% for stepper in printer.motion_report.steppers %}
      {% if stepper.startswith("stepper_z") %}
        SET_TMC_CURRENT STEPPER={stepper} CURRENT={HOME_CURRENT}
      {% endif %}
    {% endfor %}

    G91
    G1 Z{distance}

    {% for stepper in printer.motion_report.steppers %}
      {% if stepper.startswith("stepper_z") %}
        SET_TMC_CURRENT STEPPER={stepper} CURRENT={RUN_CURRENT_Z}
      {% endif %}
    {% endfor %}

    RESTORE_GCODE_STATE NAME=GENTLE_MOVE_Z

[gcode_macro _ENABLE_STEPPER_CHILLAX]
  description = Reduce hold current for steppers when idle, to keep them cooler
  gcode =
    {% set driver = "tmc2209" %}
    {% for stepper in printer.motion_report.steppers %}
      {% if stepper.startswith("stepper_") %}
        {% set holdcurrent = 0.25 * printer["%s %s" % (driver, stepper)].run_current %}
        SET_TMC_CURRENT STEPPER={stepper} HOLDCURRENT={holdcurrent}
      {% endif %}
    {% endfor %}

[gcode_macro _DISABLE_STEPPER_CHILLAX]
  description = Disable hold current for steppers when idle, for stability
  gcode =
    {% set driver = "tmc2209" %}
    {% for stepper in printer.motion_report.steppers %}
      {% if stepper.startswith("stepper_") %}
        {% set runcurrent = printer["%s %s" % (driver, stepper)].run_current %}
        SET_TMC_CURRENT STEPPER={stepper} HOLDCURRENT={runcurrent}
      {% endif %}
    {% endfor %}

[delayed_gcode stepper_chillax_init]
  initial_duration = 0.1
  gcode =
    _ENABLE_STEPPER_CHILLAX
