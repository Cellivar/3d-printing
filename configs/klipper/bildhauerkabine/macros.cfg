
# Variables for Fluidd's macros
[gcode_macro _CLIENT_VARIABLE]
  variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
  variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
  variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
  variable_custom_park_dz   : 45.0  ; custom dz value; the value in mm to lift the nozzle when move to park position

  variable_retract          : 1.0   ; the value to retract while PAUSE
  variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
  variable_speed_retract    : 35.0  ; retract speed in mm/s
  variable_unretract        : 1.0   ; the value to unretract while RESUME
  variable_speed_unretract  : 35.0  ; unretract speed in mm/s
  variable_speed_hop        : 15.0  ; z move speed in mm/s
  variable_speed_move       : 100.0 ; move speed in mm/s

  variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
  variable_park_at_cancel_x : 0     ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
  variable_park_at_cancel_y : 0     ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True

  # !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
  variable_use_fw_retract   : True  ; use fw_retraction instead of the manual version [True/False]
  variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
  variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
  #                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg

  # !!! Custom macros, please use with care and review the section of the corresponding macro.
  # These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
  # Only  single line commands are supported, please create a macro if you need more than one command.
  variable_user_pause_macro : "" ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
  variable_user_resume_macro: "" ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
  variable_user_cancel_macro: "" ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
  gcode:

[gcode_macro PRINT_START]
  gcode:
    {% set BED_TEMP = params.BED_TEMP|default(0)|int %}
    {% if BED_TEMP == 0 %}
      {% set BED_TEMP = params.BED|default(0)|int %}
    {% endif %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|int %}
    {% if EXTRUDER_TEMP == 0 %}
      {% set EXTRUDER_TEMP = params.EXTRUDER|default(0)|int %}
    {% endif %}
    {% if EXTRUDER_TEMP == 0 %}
      { action_raise_error('EXTRUDER temp missing from PRINT_START') }
    {% endif %}

    # Start heating now since it takes a while and we're doing other stuff.
    # Bed takes way longer than nozzle so don't bother preheating nozzles here
    {% if BED_TEMP != 0 %}
      M140 S{BED_TEMP}
    {% endif %}

    # Ensure pause state queue is clear
    CLEAR_PAUSE

    # Make sure we're homed
    {% if not "xyz" in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    {% set PREHEAT_BED = params.PREHEAT_BED | default(false) %}
    {% if (PREHEAT_BED) %}
      RESPOND TYPE=echo MSG='{"Preheating bed to %3.1f\u00B0C, this may take some time" % (BED_TEMP)}'
      M190 S{BED_TEMP}
    {% endif %}

    {% set BED_MESH = params.BED_MESH | default(false) %}
    {% if (BED_MESH) %}
      RESPOND TYPE=echo MSG='Performing bed mesh before printing'
      BED_MESH_CALIBRATE
    {% endif %}

    # TODO: purge line?
    M104 T1 S{EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder  MINIMUM={EXTRUDER_TEMP - 1}

    RESPOND TYPE=echo MSG='Starting print'

[gcode_macro PRINT_END]
  description = End print job and park print head
  gcode =
    _STOP_PRINTING_AND_PARK

[gcode_macro _STOP_PRINTING_AND_PARK]
  description: Same steps for cancel, end of print, etc.
  gcode =
    M400    # wait for buffer to clear
    G92 E0  # zero the extruder
    G10     # retract filament
    G91     # relative positioning

    #   Check end position to determine safe direction to move
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% if printer.toolhead.position.x < (max_x - 20) %}
      {% set x_safe = 20.0 %}
    {% else %}
      {% set x_safe = -20.0 %}
    {% endif %}

    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% if printer.toolhead.position.y < (max_y - 20) %}
      {% set y_safe = 20.0 %}
    {% else %}
      {% set y_safe = -20.0 %}
    {% endif %}

    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% if printer.toolhead.position.z < (max_z - 2) %}
      {% set z_safe = 2.0 %}
    {% else %}
      {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan

    # Move to park using Fluidd's macro, park position is set in _CLIENT_VARIABLE
    _TOOLHEAD_PARK_PAUSE_CANCEL

    # Fluidd variables to reset
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0

[gcode_macro LOAD_FILAMENT]
  variable_load_distance : 45
  variable_purge_distance: 15
  gcode:
    {% set speed = params.SPEED | default(300) %}
    SAVE_GCODE_STATE NAME=load_state
    M83                           # set extruder to relative
    G1 E{load_distance}  F1000    # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
  variable_unload_distance:  60
  variable_purge_distance :  20
  gcode:
    {% set speed = params.SPEED|default(300) %}
    SAVE_GCODE_STATE NAME=unload_state
    M83                             # set extruder to relative
    G1 E{purge_distance}   F{speed} # pull out of nozzle
    G1 E-{unload_distance} F1000    # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro _GENTLE_MOVE_Z]
  description: Gently move the bed relatively, usually when homing
  gcode:
    # We aren't sure where we are, so move GENTLY
    {% set HOME_CURRENT = 0.15 %}
    {% set distance = params.DISTANCE | default(0.0) | float %}

    # Assume there's at least one config, and all the configs are the same..
    {% set RUN_CURRENT_Z = printer.configfile.settings['tmc2209 stepper_z'].run_current | float %}

    SAVE_GCODE_STATE NAME=GENTLE_MOVE_Z

    {% for stepper in printer.motion_report.steppers %}
      {% if stepper.startswith("stepper_z") %}
        SET_TMC_CURRENT STEPPER={stepper} CURRENT={HOME_CURRENT}
      {% endif %}
    {% endfor %}

    G91
    G1 Z{distance}

    {% for stepper in printer.motion_report.steppers %}
      {% if stepper.startswith("stepper_z") %}
        SET_TMC_CURRENT STEPPER={stepper} CURRENT={RUN_CURRENT_Z}
      {% endif %}
    {% endfor %}

    RESTORE_GCODE_STATE NAME=GENTLE_MOVE_Z
